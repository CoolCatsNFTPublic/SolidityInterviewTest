{
  "address": "0x60F65f348506B634139Af2753843d32aBf51ef17",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardRarity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "rewardData",
          "type": "bytes"
        }
      ],
      "name": "LogDailyClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_commonRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_epicRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_lastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_legendaryRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_maxRarityRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_milkContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_rareRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rewardMapping",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_uncommonRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entropy",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "milkContractAddress",
          "type": "address"
        }
      ],
      "name": "setMilkContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "common",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "uncommon",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "rare",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "epic",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "legendary",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxRoll",
          "type": "uint16"
        }
      ],
      "name": "setRarityRolls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardRarity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "rewardData",
          "type": "bytes"
        }
      ],
      "name": "setReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9bd8fd94a0419eceb0a78f3fbafad274a0bb240fef3a46131e24fbf411913bf",
  "receipt": {
    "to": null,
    "from": "0x8Fa8D87C6A85bb94C8473f7E54f9e14d54DF5e2e",
    "contractAddress": "0x60F65f348506B634139Af2753843d32aBf51ef17",
    "transactionIndex": 120,
    "gasUsed": "4534713",
    "logsBloom": "0x
    "blockHash": "0x57c9566757a2453dac9b13c60c33ea99d2cc58b4c6a6ba252e36dbfcc0df7019",
    "transactionHash": "0xe9bd8fd94a0419eceb0a78f3fbafad274a0bb240fef3a46131e24fbf411913bf",
    "logs": [
      {
        "transactionIndex": 120,
        "blockNumber": 10343520,
        "transactionHash": "0xe9bd8fd94a0419eceb0a78f3fbafad274a0bb240fef3a46131e24fbf411913bf",
        "address": "0x60F65f348506B634139Af2753843d32aBf51ef17",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008fa8d87c6a85bb94c8473f7e54f9e14d54df5e2e",
          "0x0000000000000000000000008fa8d87c6a85bb94c8473f7e54f9e14d54df5e2e"
        ],
        "data": "0x",
        "logIndex": 350,
        "blockHash": "0x57c9566757a2453dac9b13c60c33ea99d2cc58b4c6a6ba252e36dbfcc0df7019"
      }
    ],
    "blockNumber": 10343520,
    "cumulativeGasUsed": "26467829",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://ipfs.io/ipfs/QmQtN81i9eNrD3wxcr67scDpLvZDDXxbmAvNXMaZh3D6tB/"
  ],
  "numDeployments": 5,
  "solcInputHash": "5e0d451c81284c1158fb23e4c15f3fee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRarity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"rewardData\",\"type\":\"bytes\"}],\"name\":\"LogDailyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_commonRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_epicRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_legendaryRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxRarityRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_milkContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rareRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rewardMapping\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uncommonRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"milkContractAddress\",\"type\":\"address\"}],\"name\":\"setMilkContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"common\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"uncommon\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rare\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"epic\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"legendary\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxRoll\",\"type\":\"uint16\"}],\"name\":\"setRarityRolls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRarity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rewardData\",\"type\":\"bytes\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)\":{\"params\":{\"common\":\"- rarity level of common quests\",\"epic\":\"- rarity level of epic quests\",\"legendary\":\"- rarity level of legendary quests\",\"maxRoll\":\"- max rarity level\",\"rare\":\"- rarity level of rare quests\",\"uncommon\":\"- rarity level of uncommon quests\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"_commonRoll\":{\"details\":\"Rarity rolls\"},\"_lastUpdate\":{\"details\":\"Track last time a claim was made for a specific pet\"},\"_rewardMapping\":{\"details\":\"rewardType => (rewardRarity => data)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)\":{\"notice\":\"returns the rarity level set for each rarity, and the maximum roll\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/itemFactory.sol\":\"ItemFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/common/ERC1155SupplyCC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\r\\n *\\r\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\r\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\r\\n * corresponding is an NFT, there is no guarantees that no other token with the\\r\\n * same id are not going to be minted.\\r\\n */\\r\\nabstract contract ERC1155SupplyCC is ERC1155 {\\r\\n    mapping(uint256 => uint256) private _totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev Total amount of tokens in with a given id.\\r\\n     */\\r\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\r\\n        return _totalSupply[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates whether any token exist with a given id, or not.\\r\\n     */\\r\\n    function exists(uint256 id) public view virtual returns (bool) {\\r\\n        return ERC1155SupplyCC.totalSupply(id) > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            for (uint256 i = 0; i < ids.length; ++i) {\\r\\n                _totalSupply[ids[i]] += amounts[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (to == address(0)) {\\r\\n            for (uint256 i = 0; i < ids.length; ++i) {\\r\\n                uint256 id = ids[i];\\r\\n                uint256 amount = amounts[i];\\r\\n                uint256 supply = _totalSupply[id];\\r\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\r\\n                unchecked {\\r\\n                    _totalSupply[id] = supply - amount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaa2f79f09a8c7bcda178fd32f5d5cd90ab05d33c4483d35ed3be8932f8703a95\",\"license\":\"MIT\"},\"contracts/itemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./common/ERC1155SupplyCC.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ninterface IMilk {\\r\\n    function gameMint(address, uint256) external;\\r\\n}\\r\\n\\r\\ncontract ItemFactory is ERC1155SupplyCC, AccessControl {\\r\\n    /// @dev Track last time a claim was made for a specific pet\\r\\n    mapping(address => uint256) public _lastUpdate;\\r\\n\\r\\n    address public _milkContractAddress;\\r\\n\\r\\n    /// @dev Rarity rolls\\r\\n    uint16 public _commonRoll = 60;\\r\\n    uint16 public _uncommonRoll = 80;\\r\\n    uint16 public _rareRoll = 90;\\r\\n    uint16 public _epicRoll = 98;\\r\\n    uint16 public _legendaryRoll = 100;\\r\\n    uint16 public _maxRarityRoll;\\r\\n\\r\\n    enum ERarity {\\r\\n        COMMON,\\r\\n        UNCOMMON,\\r\\n        RARE,\\r\\n        EPIC,\\r\\n        LEGENDARY\\r\\n    }\\r\\n\\r\\n    enum EType {\\r\\n        MILK,\\r\\n        BOX\\r\\n    }\\r\\n\\r\\n    /// @dev rewardType => (rewardRarity => data)\\r\\n    mapping(uint256 => mapping(uint256 => bytes)) public _rewardMapping;\\r\\n\\r\\n    event LogDailyClaim(\\r\\n        address claimer,\\r\\n        uint256 rewardType,\\r\\n        uint256 rewardRarity,\\r\\n        bytes rewardData\\r\\n    );\\r\\n\\r\\n    constructor(string memory uri) ERC1155(uri) {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    function setMilkContractAddress(address milkContractAddress)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        _milkContractAddress = milkContractAddress;\\r\\n    }\\r\\n\\r\\n    function claim(address claimer, uint256 entropy) external {\\r\\n        require(\\r\\n            _lastUpdate[claimer] <= block.timestamp - 1 days,\\r\\n            \\\"Claim once per day\\\"\\r\\n        );\\r\\n        // Claims are specific to the that pet, not the claimer or a combination of claimer and pet\\r\\n        _lastUpdate[claimer] = block.timestamp;\\r\\n\\r\\n        // generate a single random number and bit shift as needed\\r\\n        uint256 randNum = randomNum(entropy);\\r\\n\\r\\n        // roll and pick the rarity level of the reward\\r\\n        uint256 randRarity = randNum % _legendaryRoll;\\r\\n        uint256 rewardRarity;\\r\\n        bytes memory rewardData;\\r\\n        uint256 rewardType = uint256(EType.BOX);\\r\\n\\r\\n        // pick rarity based on rarity chances\\r\\n        if (randRarity < _commonRoll) {\\r\\n            rewardRarity = uint256(ERarity.COMMON);\\r\\n        } else if (randRarity < _uncommonRoll) {\\r\\n            rewardRarity = uint256(ERarity.UNCOMMON);\\r\\n        } else if (randRarity < _rareRoll) {\\r\\n            rewardRarity = uint256(ERarity.RARE);\\r\\n        } else if (randRarity < _epicRoll) {\\r\\n            rewardRarity = uint256(ERarity.EPIC);\\r\\n        } else {\\r\\n            rewardRarity = uint256(ERarity.LEGENDARY);\\r\\n        }\\r\\n\\r\\n        // handle Legendary on its own\\r\\n        // always a box\\r\\n        if (rewardRarity == uint256(ERarity.LEGENDARY)) {\\r\\n            // give the user a box\\r\\n            _mint(claimer, 1, 1, \\\"\\\");\\r\\n        }\\r\\n        // handle MILK or ITEMS\\r\\n        else {\\r\\n            // This will pick a random number between 0 and 1 inc.\\r\\n            // MILK or ITEMS.\\r\\n            rewardType = randomNum(entropy) % uint256(EType.BOX);\\r\\n\\r\\n            // convert the reward mapping data to min and max\\r\\n            (uint256 min, uint256 max, uint256[] memory ids) = abi.decode(\\r\\n                _rewardMapping[rewardType][rewardRarity],\\r\\n                (uint256, uint256, uint256[])\\r\\n            );\\r\\n\\r\\n            // do some bit shifting magic to create random min max\\r\\n            uint256 rewardAmount = min +\\r\\n                ((randomNum(entropy)) % (max - min + 1));\\r\\n\\r\\n            // Give a MILK reward\\r\\n            if (rewardType == uint256(EType.MILK)) {\\r\\n                IMilk milk = IMilk(_milkContractAddress);\\r\\n                milk.gameMint(claimer, rewardAmount);\\r\\n                rewardData = abi.encode(rewardAmount);\\r\\n            }\\r\\n            // Give an item reward\\r\\n            else {\\r\\n                uint256 index = (randomNum(entropy)) % ids.length;\\r\\n                _mint(claimer, ids[index], rewardAmount, \\\"\\\");\\r\\n                rewardData = abi.encode(ids[index], rewardAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LogDailyClaim(claimer, rewardType, rewardRarity, rewardData);\\r\\n    }\\r\\n\\r\\n    function randomNum(uint256 entropy) internal view returns (uint256) {\\r\\n        return\\r\\n            uint256(\\r\\n                keccak256(\\r\\n                    abi.encode(block.timestamp, block.difficulty, entropy)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /** SETTERS */\\r\\n\\r\\n    /// @notice returns the rarity level set for each rarity, and the maximum roll\\r\\n    /// @param common - rarity level of common quests\\r\\n    /// @param uncommon - rarity level of uncommon quests\\r\\n    /// @param rare - rarity level of rare quests\\r\\n    /// @param epic - rarity level of epic quests\\r\\n    /// @param legendary - rarity level of legendary quests\\r\\n    /// @param maxRoll - max rarity level\\r\\n    function setRarityRolls(\\r\\n        uint16 common,\\r\\n        uint16 uncommon,\\r\\n        uint16 rare,\\r\\n        uint16 epic,\\r\\n        uint16 legendary,\\r\\n        uint16 maxRoll\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(common < uncommon, \\\"Common must be less rare than uncommon\\\");\\r\\n        require(uncommon < rare, \\\"Uncommon must be less rare than rare\\\");\\r\\n        require(rare < epic, \\\"Rare must be less rare than epic\\\");\\r\\n        require(epic < legendary, \\\"Epic must be less rare than legendary\\\");\\r\\n        require(\\r\\n            legendary <= maxRoll,\\r\\n            \\\"Legendary rarity level must be less than or equal to the max rarity roll\\\"\\r\\n        );\\r\\n\\r\\n        _commonRoll = common;\\r\\n        _uncommonRoll = uncommon;\\r\\n        _rareRoll = rare;\\r\\n        _epicRoll = epic;\\r\\n        _legendaryRoll = legendary;\\r\\n        _maxRarityRoll = maxRoll;\\r\\n    }\\r\\n\\r\\n    function setReward(\\r\\n        uint256 rewardType,\\r\\n        uint256 rewardRarity,\\r\\n        bytes calldata rewardData\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        abi.decode(rewardData, (uint256, uint256, uint256[]));\\r\\n        _rewardMapping[rewardType][rewardRarity] = rewardData;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC1155, AccessControl)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d62ae47fd99a1e1aa2a2ba694874f9f406fbf4695bb29dcd1b1a478f07c0d99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052603c600660146101000a81548161ffff021916908361ffff1602179055506050600660166101000a81548161ffff021916908361ffff160217905550605a600660186101000a81548161ffff021916908361ffff16021790555060626006601a6101000a81548161ffff021916908361ffff16021790555060646006601c6101000a81548161ffff021916908361ffff160217905550348015620000a757600080fd5b5060405162005438380380620054388339818101604052810190620000cd9190620003c4565b80620000df816200010b60201b60201c565b50620001046000801b620000f86200012760201b60201c565b6200012f60201b60201c565b5062000579565b806002908051906020019062000123929190620002a2565b5050565b600033905090565b6200014182826200014560201b60201c565b5050565b6200015782826200023760201b60201c565b620002335760016004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001d86200012760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054620002b0906200049e565b90600052602060002090601f016020900481019282620002d4576000855562000320565b82601f10620002ef57805160ff191683800117855562000320565b8280016001018555821562000320579182015b828111156200031f57825182559160200191906001019062000302565b5b5090506200032f919062000333565b5090565b5b808211156200034e57600081600090555060010162000334565b5090565b600062000369620003638462000432565b62000409565b9050828152602081018484840111156200038257600080fd5b6200038f84828562000468565b509392505050565b600082601f830112620003a957600080fd5b8151620003bb84826020860162000352565b91505092915050565b600060208284031215620003d757600080fd5b600082015167ffffffffffffffff811115620003f257600080fd5b620004008482850162000397565b91505092915050565b60006200041562000428565b9050620004238282620004d4565b919050565b6000604051905090565b600067ffffffffffffffff82111562000450576200044f62000539565b5b6200045b8262000568565b9050602081019050919050565b60005b83811015620004885780820151818401526020810190506200046b565b8381111562000498576000848401525b50505050565b60006002820490506001821680620004b757607f821691505b60208210811415620004ce57620004cd6200050a565b5b50919050565b620004df8262000568565b810181811067ffffffffffffffff8211171562000501576200050062000539565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b614eaf80620005896000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c80636a6b6ed811610104578063aad3ec96116100a2578063d547741f11610071578063d547741f14610565578063db43235b14610581578063e985e9c51461059f578063f242432a146105cf576101ce565b8063aad3ec96146104cb578063bd85b039146104e7578063c62e93b214610517578063d44c467014610547576101ce565b80639a6a8888116100de5780639a6a8888146104575780639beccd5f14610473578063a217fddf14610491578063a22cb465146104af576101ce565b80636a6b6ed8146103eb578063710d2b151461040957806391d1485414610427576101ce565b80632eb2c2d61161017157806340a32dc51161014b57806340a32dc5146103535780634e1273f41461036f5780634f558e791461039f5780635d5d588c146103cf576101ce565b80632eb2c2d6146102ff5780632f2ff15d1461031b57806336568abe14610337576101ce565b80630e89341c116101ad5780630e89341c1461025157806313ca915714610281578063248a9ca31461029f5780632d7e79e0146102cf576101ce565b8062fdd58e146101d357806301ffc9a71461020357806309c3bf7214610233575b600080fd5b6101ed60048036038101906101e891906134d7565b6105eb565b6040516101fa91906141cd565b60405180910390f35b61021d600480360381019061021891906135e4565b6106b4565b60405161022a9190613eb8565b60405180910390f35b61023b6106c6565b60405161024891906141b2565b60405180910390f35b61026b600480360381019061026691906136bf565b6106da565b6040516102789190613f10565b60405180910390f35b61028961076e565b6040516102969190613d0d565b60405180910390f35b6102b960048036038101906102b4919061357f565b610794565b6040516102c69190613ed3565b60405180910390f35b6102e960048036038101906102e491906132e8565b6107b4565b6040516102f691906141cd565b60405180910390f35b6103196004803603810190610314919061334d565b6107cc565b005b610335600480360381019061033091906135a8565b61086d565b005b610351600480360381019061034c91906135a8565b610896565b005b61036d60048036038101906103689190613636565b610919565b005b61038960048036038101906103849190613513565b610b58565b6040516103969190613e5f565b60405180910390f35b6103b960048036038101906103b491906136bf565b610d09565b6040516103c69190613eb8565b60405180910390f35b6103e960048036038101906103e491906137f2565b610d1d565b005b6103f3610d7f565b60405161040091906141b2565b60405180910390f35b610411610d93565b60405161041e91906141b2565b60405180910390f35b610441600480360381019061043c91906135a8565b610da7565b60405161044e9190613eb8565b60405180910390f35b610471600480360381019061046c91906132e8565b610e12565b005b61047b610e6c565b60405161048891906141b2565b60405180910390f35b610499610e80565b6040516104a69190613ed3565b60405180910390f35b6104c960048036038101906104c4919061349b565b610e87565b005b6104e560048036038101906104e091906134d7565b610e9d565b005b61050160048036038101906104fc91906136bf565b61156c565b60405161050e91906141cd565b60405180910390f35b610531600480360381019061052c91906136e8565b611589565b60405161053e9190613eee565b60405180910390f35b61054f611636565b60405161055c91906141b2565b60405180910390f35b61057f600480360381019061057a91906135a8565b61164a565b005b610589611673565b60405161059691906141b2565b60405180910390f35b6105b960048036038101906105b49190613311565b611687565b6040516105c69190613eb8565b60405180910390f35b6105e960048036038101906105e4919061340c565b61171b565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561065c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065390613fd2565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006106bf826117bc565b9050919050565b6006601c9054906101000a900461ffff1681565b6060600280546106e99061454e565b80601f01602080910402602001604051908101604052809291908181526020018280546107159061454e565b80156107625780601f1061073757610100808354040283529160200191610762565b820191906000526020600020905b81548152906001019060200180831161074557829003601f168201915b50505050509050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060046000838152602001908152602001600020600101549050919050565b60056020528060005260406000206000915090505481565b6107d4611836565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061081a575061081985610814611836565b611687565b5b610859576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085090614052565b60405180910390fd5b610866858585858561183e565b5050505050565b61087682610794565b61088781610882611836565b611b9e565b6108918383611c3b565b505050565b61089e611836565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090290614192565b60405180910390fd5b6109158282611d1c565b5050565b6000801b61092e81610929611836565b611b9e565b8561ffff168761ffff1610610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90613fb2565b60405180910390fd5b8461ffff168661ffff16106109c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b9906140b2565b60405180910390fd5b8361ffff168561ffff1610610a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a03906140d2565b60405180910390fd5b8261ffff168461ffff1610610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d90613ff2565b60405180910390fd5b8161ffff168361ffff161115610aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9890613f52565b60405180910390fd5b86600660146101000a81548161ffff021916908361ffff16021790555085600660166101000a81548161ffff021916908361ffff16021790555084600660186101000a81548161ffff021916908361ffff160217905550836006601a6101000a81548161ffff021916908361ffff160217905550826006601c6101000a81548161ffff021916908361ffff160217905550816006601e6101000a81548161ffff021916908361ffff16021790555050505050505050565b60608151835114610b9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9590614112565b60405180910390fd5b6000835167ffffffffffffffff811115610be1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610c0f5781602001602082028036833780820191505090505b50905060005b8451811015610cfe57610ca8858281518110610c5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110610c9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516105eb565b828281518110610ce1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080610cf7906145b1565b9050610c15565b508091505092915050565b600080610d158361156c565b119050919050565b6000801b610d3281610d2d611836565b611b9e565b8282810190610d419190613724565b50505082826007600088815260200190815260200160002060008781526020019081526020016000209190610d77929190612f29565b505050505050565b600660189054906101000a900461ffff1681565b600660169054906101000a900461ffff1681565b60006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b610e2781610e22611836565b611b9e565b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6006601a9054906101000a900461ffff1681565b6000801b81565b610e99610e92611836565b8383611dfe565b5050565b6201518042610eac9190614422565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2490614132565b60405180910390fd5b42600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000610f7c82611f6b565b905060006006601c9054906101000a900461ffff1661ffff1682610fa091906145fa565b9050600060606000600180811115610fe1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050600660149054906101000a900461ffff1661ffff168410156110405760006004811115611039577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611196565b600660169054906101000a900461ffff1661ffff1684101561109d5760016004811115611096577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611195565b600660189054906101000a900461ffff1661ffff168410156110fa57600260048111156110f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611194565b6006601a9054906101000a900461ffff1661ffff168410156111575760036004811115611150577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611193565b600480811115611190577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b92505b5b5b5b6004808111156111cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8314156111f7576111f28760018060405180602001604052806000815250611fa2565b611526565b600180811115611230577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61123987611f6b565b61124391906145fa565b9050600080600060076000858152602001908152602001600020600087815260200190815260200160002080546112799061454e565b80601f01602080910402602001604051908101604052809291908181526020018280546112a59061454e565b80156112f25780601f106112c7576101008083540402835291602001916112f2565b820191906000526020600020905b8154815290600101906020018083116112d557829003601f168201915b505050505080602001905181019061130a919061378b565b9250925092506000600184846113209190614422565b61132a9190614372565b6113338b611f6b565b61133d91906145fa565b846113489190614372565b905060006001811115611384577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b851415611447576000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634eb902998d846040518363ffffffff1660e01b81526004016113ed929190613dea565b600060405180830381600087803b15801561140757600080fd5b505af115801561141b573d6000803e3d6000fd5b505050508160405160200161143091906141cd565b604051602081830303815290604052965050611521565b600082516114548c611f6b565b61145e91906145fa565b90506114bb8c84838151811061149d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518460405180602001604052806000815250611fa2565b8281815181106114f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518260405160200161150e9291906141e8565b6040516020818303038152906040529650505b505050505b7f0abddb16689c98df752491657c9e586eff3198ece0269bcb57d4f690528e71a48782858560405161155b9493929190613e13565b60405180910390a150505050505050565b600060036000838152602001908152602001600020549050919050565b60076020528160005260406000206020528060005260406000206000915091505080546115b59061454e565b80601f01602080910402602001604051908101604052809291908181526020018280546115e19061454e565b801561162e5780601f106116035761010080835404028352916020019161162e565b820191906000526020600020905b81548152906001019060200180831161161157829003601f168201915b505050505081565b6006601e9054906101000a900461ffff1681565b61165382610794565b6116648161165f611836565b611b9e565b61166e8383611d1c565b505050565b600660149054906101000a900461ffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611723611836565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611769575061176885611763611836565b611687565b5b6117a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179f90614012565b60405180910390fd5b6117b58585858585612138565b5050505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061182f575061182e826123ba565b5b9050919050565b600033905090565b8151835114611882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187990614152565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156118f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e990614032565b60405180910390fd5b60006118fc611836565b905061190c81878787878761249c565b60005b8451811015611b09576000858281518110611953577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000858381518110611998577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3090614072565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611aee9190614372565b9250508190555050505080611b02906145b1565b905061190f565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b80929190613e81565b60405180910390a4611b96818787878787612706565b505050505050565b611ba88282610da7565b611c3757611bcd8173ffffffffffffffffffffffffffffffffffffffff1660146128ed565b611bdb8360001c60206128ed565b604051602001611bec929190613cd3565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2e9190613f10565b60405180910390fd5b5050565b611c458282610da7565b611d185760016004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611cbd611836565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611d268282610da7565b15611dfa5760006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611d9f611836565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e64906140f2565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611f5e9190613eb8565b60405180910390a3505050565b6000424483604051602001611f8293929190614211565b6040516020818303038152906040528051906020012060001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200990614172565b60405180910390fd5b600061201c611836565b905061203d8160008761202e88612be7565b61203788612be7565b8761249c565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461209c9190614372565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161211a9291906141e8565b60405180910390a461213181600087878787612cad565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156121a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219f90614032565b60405180910390fd5b60006121b2611836565b90506121d28187876121c388612be7565b6121cc88612be7565b8761249c565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226090614072565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461231e9190614372565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161239b9291906141e8565b60405180910390a46123b1828888888888612cad565b50505050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061248557507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612495575061249482612e94565b5b9050919050565b6124aa868686868686612efe565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156125a85760005b83518110156125a657828181518110612524577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160036000868481518110612569577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020600082825461258e9190614372565b925050819055508061259f906145b1565b90506124e2565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156126fe5760005b83518110156126fc576000848281518110612624577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000848381518110612669577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600060036000848152602001908152602001600020549050818110156126ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c590614092565b60405180910390fd5b8181036003600085815260200190815260200160002081905550505050806126f5906145b1565b90506125e0565b505b505050505050565b6127258473ffffffffffffffffffffffffffffffffffffffff16612f06565b156128e5578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161276b959493929190613d28565b602060405180830381600087803b15801561278557600080fd5b505af19250505080156127b657506040513d601f19601f820116820180604052508101906127b3919061360d565b60015b61285c576127c26146e7565b806308c379a0141561281f57506127d7614d59565b806127e25750612821565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128169190613f10565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285390613f32565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146128e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128da90613f92565b60405180910390fd5b505b505050505050565b60606000600283600261290091906143c8565b61290a9190614372565b67ffffffffffffffff811115612949577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561297b5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a63577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612aa391906143c8565b612aad9190614372565b90505b6001811115612b99577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612b15577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612b52577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612b9290614524565b9050612ab0565b5060008414612bdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd490613f72565b60405180910390fd5b8091505092915050565b60606000600167ffffffffffffffff811115612c2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612c5a5781602001602082028036833780820191505090505b5090508281600081518110612c98577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b612ccc8473ffffffffffffffffffffffffffffffffffffffff16612f06565b15612e8c578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612d12959493929190613d90565b602060405180830381600087803b158015612d2c57600080fd5b505af1925050508015612d5d57506040513d601f19601f82011682018060405250810190612d5a919061360d565b60015b612e0357612d696146e7565b806308c379a01415612dc65750612d7e614d59565b80612d895750612dc8565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dbd9190613f10565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dfa90613f32565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e8190613f92565b60405180910390fd5b505b505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612f359061454e565b90600052602060002090601f016020900481019282612f575760008555612f9e565b82601f10612f7057803560ff1916838001178555612f9e565b82800160010185558215612f9e579182015b82811115612f9d578235825591602001919060010190612f82565b5b509050612fab9190612faf565b5090565b5b80821115612fc8576000816000905550600101612fb0565b5090565b6000612fdf612fda8461426d565b614248565b90508083825260208201905082856020860282011115612ffe57600080fd5b60005b8581101561302e5781613014888261314e565b845260208401935060208301925050600181019050613001565b5050509392505050565b600061304b61304684614299565b614248565b9050808382526020820190508285602086028201111561306a57600080fd5b60005b8581101561309a578161308088826132be565b84526020840193506020830192505060018101905061306d565b5050509392505050565b60006130b76130b284614299565b614248565b905080838252602082019050828560208602820111156130d657600080fd5b60005b8581101561310657816130ec88826132d3565b8452602084019350602083019250506001810190506130d9565b5050509392505050565b600061312361311e846142c5565b614248565b90508281526020810184848401111561313b57600080fd5b6131468482856144e2565b509392505050565b60008135905061315d81614def565b92915050565b600082601f83011261317457600080fd5b8135613184848260208601612fcc565b91505092915050565b600082601f83011261319e57600080fd5b81356131ae848260208601613038565b91505092915050565b600082601f8301126131c857600080fd5b81516131d88482602086016130a4565b91505092915050565b6000813590506131f081614e06565b92915050565b60008135905061320581614e1d565b92915050565b60008135905061321a81614e34565b92915050565b60008151905061322f81614e34565b92915050565b60008083601f84011261324757600080fd5b8235905067ffffffffffffffff81111561326057600080fd5b60208301915083600182028301111561327857600080fd5b9250929050565b600082601f83011261329057600080fd5b81356132a0848260208601613110565b91505092915050565b6000813590506132b881614e4b565b92915050565b6000813590506132cd81614e62565b92915050565b6000815190506132e281614e62565b92915050565b6000602082840312156132fa57600080fd5b60006133088482850161314e565b91505092915050565b6000806040838503121561332457600080fd5b60006133328582860161314e565b92505060206133438582860161314e565b9150509250929050565b600080600080600060a0868803121561336557600080fd5b60006133738882890161314e565b95505060206133848882890161314e565b945050604086013567ffffffffffffffff8111156133a157600080fd5b6133ad8882890161318d565b935050606086013567ffffffffffffffff8111156133ca57600080fd5b6133d68882890161318d565b925050608086013567ffffffffffffffff8111156133f357600080fd5b6133ff8882890161327f565b9150509295509295909350565b600080600080600060a0868803121561342457600080fd5b60006134328882890161314e565b95505060206134438882890161314e565b9450506040613454888289016132be565b9350506060613465888289016132be565b925050608086013567ffffffffffffffff81111561348257600080fd5b61348e8882890161327f565b9150509295509295909350565b600080604083850312156134ae57600080fd5b60006134bc8582860161314e565b92505060206134cd858286016131e1565b9150509250929050565b600080604083850312156134ea57600080fd5b60006134f88582860161314e565b9250506020613509858286016132be565b9150509250929050565b6000806040838503121561352657600080fd5b600083013567ffffffffffffffff81111561354057600080fd5b61354c85828601613163565b925050602083013567ffffffffffffffff81111561356957600080fd5b6135758582860161318d565b9150509250929050565b60006020828403121561359157600080fd5b600061359f848285016131f6565b91505092915050565b600080604083850312156135bb57600080fd5b60006135c9858286016131f6565b92505060206135da8582860161314e565b9150509250929050565b6000602082840312156135f657600080fd5b60006136048482850161320b565b91505092915050565b60006020828403121561361f57600080fd5b600061362d84828501613220565b91505092915050565b60008060008060008060c0878903121561364f57600080fd5b600061365d89828a016132a9565b965050602061366e89828a016132a9565b955050604061367f89828a016132a9565b945050606061369089828a016132a9565b93505060806136a189828a016132a9565b92505060a06136b289828a016132a9565b9150509295509295509295565b6000602082840312156136d157600080fd5b60006136df848285016132be565b91505092915050565b600080604083850312156136fb57600080fd5b6000613709858286016132be565b925050602061371a858286016132be565b9150509250929050565b60008060006060848603121561373957600080fd5b6000613747868287016132be565b9350506020613758868287016132be565b925050604084013567ffffffffffffffff81111561377557600080fd5b6137818682870161318d565b9150509250925092565b6000806000606084860312156137a057600080fd5b60006137ae868287016132d3565b93505060206137bf868287016132d3565b925050604084015167ffffffffffffffff8111156137dc57600080fd5b6137e8868287016131b7565b9150509250925092565b6000806000806060858703121561380857600080fd5b6000613816878288016132be565b9450506020613827878288016132be565b935050604085013567ffffffffffffffff81111561384457600080fd5b61385087828801613235565b925092505092959194509250565b600061386a8383613cb5565b60208301905092915050565b61387f81614456565b82525050565b600061389082614306565b61389a8185614334565b93506138a5836142f6565b8060005b838110156138d65781516138bd888261385e565b97506138c883614327565b9250506001810190506138a9565b5085935050505092915050565b6138ec81614468565b82525050565b6138fb81614474565b82525050565b600061390c82614311565b6139168185614345565b93506139268185602086016144f1565b61392f81614709565b840191505092915050565b60006139458261431c565b61394f8185614356565b935061395f8185602086016144f1565b61396881614709565b840191505092915050565b600061397e8261431c565b6139888185614367565b93506139988185602086016144f1565b80840191505092915050565b60006139b1603483614356565b91506139bc82614727565b604082019050919050565b60006139d4604883614356565b91506139df82614776565b606082019050919050565b60006139f7602083614356565b9150613a02826147eb565b602082019050919050565b6000613a1a602883614356565b9150613a2582614814565b604082019050919050565b6000613a3d602683614356565b9150613a4882614863565b604082019050919050565b6000613a60602b83614356565b9150613a6b826148b2565b604082019050919050565b6000613a83602583614356565b9150613a8e82614901565b604082019050919050565b6000613aa6602983614356565b9150613ab182614950565b604082019050919050565b6000613ac9602583614356565b9150613ad48261499f565b604082019050919050565b6000613aec603283614356565b9150613af7826149ee565b604082019050919050565b6000613b0f602a83614356565b9150613b1a82614a3d565b604082019050919050565b6000613b32602883614356565b9150613b3d82614a8c565b604082019050919050565b6000613b55602483614356565b9150613b6082614adb565b604082019050919050565b6000613b78602083614356565b9150613b8382614b2a565b602082019050919050565b6000613b9b601783614367565b9150613ba682614b53565b601782019050919050565b6000613bbe602983614356565b9150613bc982614b7c565b604082019050919050565b6000613be1602983614356565b9150613bec82614bcb565b604082019050919050565b6000613c04601283614356565b9150613c0f82614c1a565b602082019050919050565b6000613c27602883614356565b9150613c3282614c43565b604082019050919050565b6000613c4a602183614356565b9150613c5582614c92565b604082019050919050565b6000613c6d601183614367565b9150613c7882614ce1565b601182019050919050565b6000613c90602f83614356565b9150613c9b82614d0a565b604082019050919050565b613caf816144aa565b82525050565b613cbe816144d8565b82525050565b613ccd816144d8565b82525050565b6000613cde82613b8e565b9150613cea8285613973565b9150613cf582613c60565b9150613d018284613973565b91508190509392505050565b6000602082019050613d226000830184613876565b92915050565b600060a082019050613d3d6000830188613876565b613d4a6020830187613876565b8181036040830152613d5c8186613885565b90508181036060830152613d708185613885565b90508181036080830152613d848184613901565b90509695505050505050565b600060a082019050613da56000830188613876565b613db26020830187613876565b613dbf6040830186613cc4565b613dcc6060830185613cc4565b8181036080830152613dde8184613901565b90509695505050505050565b6000604082019050613dff6000830185613876565b613e0c6020830184613cc4565b9392505050565b6000608082019050613e286000830187613876565b613e356020830186613cc4565b613e426040830185613cc4565b8181036060830152613e548184613901565b905095945050505050565b60006020820190508181036000830152613e798184613885565b905092915050565b60006040820190508181036000830152613e9b8185613885565b90508181036020830152613eaf8184613885565b90509392505050565b6000602082019050613ecd60008301846138e3565b92915050565b6000602082019050613ee860008301846138f2565b92915050565b60006020820190508181036000830152613f088184613901565b905092915050565b60006020820190508181036000830152613f2a818461393a565b905092915050565b60006020820190508181036000830152613f4b816139a4565b9050919050565b60006020820190508181036000830152613f6b816139c7565b9050919050565b60006020820190508181036000830152613f8b816139ea565b9050919050565b60006020820190508181036000830152613fab81613a0d565b9050919050565b60006020820190508181036000830152613fcb81613a30565b9050919050565b60006020820190508181036000830152613feb81613a53565b9050919050565b6000602082019050818103600083015261400b81613a76565b9050919050565b6000602082019050818103600083015261402b81613a99565b9050919050565b6000602082019050818103600083015261404b81613abc565b9050919050565b6000602082019050818103600083015261406b81613adf565b9050919050565b6000602082019050818103600083015261408b81613b02565b9050919050565b600060208201905081810360008301526140ab81613b25565b9050919050565b600060208201905081810360008301526140cb81613b48565b9050919050565b600060208201905081810360008301526140eb81613b6b565b9050919050565b6000602082019050818103600083015261410b81613bb1565b9050919050565b6000602082019050818103600083015261412b81613bd4565b9050919050565b6000602082019050818103600083015261414b81613bf7565b9050919050565b6000602082019050818103600083015261416b81613c1a565b9050919050565b6000602082019050818103600083015261418b81613c3d565b9050919050565b600060208201905081810360008301526141ab81613c83565b9050919050565b60006020820190506141c76000830184613ca6565b92915050565b60006020820190506141e26000830184613cc4565b92915050565b60006040820190506141fd6000830185613cc4565b61420a6020830184613cc4565b9392505050565b60006060820190506142266000830186613cc4565b6142336020830185613cc4565b6142406040830184613cc4565b949350505050565b6000614252614263565b905061425e8282614580565b919050565b6000604051905090565b600067ffffffffffffffff821115614288576142876146b8565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156142b4576142b36146b8565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156142e0576142df6146b8565b5b6142e982614709565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061437d826144d8565b9150614388836144d8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143bd576143bc61462b565b5b828201905092915050565b60006143d3826144d8565b91506143de836144d8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156144175761441661462b565b5b828202905092915050565b600061442d826144d8565b9150614438836144d8565b92508282101561444b5761444a61462b565b5b828203905092915050565b6000614461826144b8565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561450f5780820151818401526020810190506144f4565b8381111561451e576000848401525b50505050565b600061452f826144d8565b915060008214156145435761454261462b565b5b600182039050919050565b6000600282049050600182168061456657607f821691505b6020821081141561457a57614579614689565b5b50919050565b61458982614709565b810181811067ffffffffffffffff821117156145a8576145a76146b8565b5b80604052505050565b60006145bc826144d8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156145ef576145ee61462b565b5b600182019050919050565b6000614605826144d8565b9150614610836144d8565b9250826146205761461f61465a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156147065760046000803e61470360005161471a565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f4c6567656e6461727920726172697479206c6576656c206d757374206265206c60008201527f657373207468616e206f7220657175616c20746f20746865206d61782072617260208201527f69747920726f6c6c000000000000000000000000000000000000000000000000604082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f436f6d6d6f6e206d757374206265206c6573732072617265207468616e20756e60008201527f636f6d6d6f6e0000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f45706963206d757374206265206c6573732072617265207468616e206c65676560008201527f6e64617279000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b7f556e636f6d6d6f6e206d757374206265206c6573732072617265207468616e2060008201527f7261726500000000000000000000000000000000000000000000000000000000602082015250565b7f52617265206d757374206265206c6573732072617265207468616e2065706963600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f436c61696d206f6e636520706572206461790000000000000000000000000000600082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600060443d1015614d6957614dec565b614d71614263565b60043d036004823e80513d602482011167ffffffffffffffff82111715614d99575050614dec565b808201805167ffffffffffffffff811115614db75750505050614dec565b80602083010160043d038501811115614dd4575050505050614dec565b614de382602001850186614580565b82955050505050505b90565b614df881614456565b8114614e0357600080fd5b50565b614e0f81614468565b8114614e1a57600080fd5b50565b614e2681614474565b8114614e3157600080fd5b50565b614e3d8161447e565b8114614e4857600080fd5b50565b614e54816144aa565b8114614e5f57600080fd5b50565b614e6b816144d8565b8114614e7657600080fd5b5056fea26469706673582212201eb9dc693fadfb68de7ceb6b068f63c330b0e97682ddd811007e7a5720de923764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ce5760003560e01c80636a6b6ed811610104578063aad3ec96116100a2578063d547741f11610071578063d547741f14610565578063db43235b14610581578063e985e9c51461059f578063f242432a146105cf576101ce565b8063aad3ec96146104cb578063bd85b039146104e7578063c62e93b214610517578063d44c467014610547576101ce565b80639a6a8888116100de5780639a6a8888146104575780639beccd5f14610473578063a217fddf14610491578063a22cb465146104af576101ce565b80636a6b6ed8146103eb578063710d2b151461040957806391d1485414610427576101ce565b80632eb2c2d61161017157806340a32dc51161014b57806340a32dc5146103535780634e1273f41461036f5780634f558e791461039f5780635d5d588c146103cf576101ce565b80632eb2c2d6146102ff5780632f2ff15d1461031b57806336568abe14610337576101ce565b80630e89341c116101ad5780630e89341c1461025157806313ca915714610281578063248a9ca31461029f5780632d7e79e0146102cf576101ce565b8062fdd58e146101d357806301ffc9a71461020357806309c3bf7214610233575b600080fd5b6101ed60048036038101906101e891906134d7565b6105eb565b6040516101fa91906141cd565b60405180910390f35b61021d600480360381019061021891906135e4565b6106b4565b60405161022a9190613eb8565b60405180910390f35b61023b6106c6565b60405161024891906141b2565b60405180910390f35b61026b600480360381019061026691906136bf565b6106da565b6040516102789190613f10565b60405180910390f35b61028961076e565b6040516102969190613d0d565b60405180910390f35b6102b960048036038101906102b4919061357f565b610794565b6040516102c69190613ed3565b60405180910390f35b6102e960048036038101906102e491906132e8565b6107b4565b6040516102f691906141cd565b60405180910390f35b6103196004803603810190610314919061334d565b6107cc565b005b610335600480360381019061033091906135a8565b61086d565b005b610351600480360381019061034c91906135a8565b610896565b005b61036d60048036038101906103689190613636565b610919565b005b61038960048036038101906103849190613513565b610b58565b6040516103969190613e5f565b60405180910390f35b6103b960048036038101906103b491906136bf565b610d09565b6040516103c69190613eb8565b60405180910390f35b6103e960048036038101906103e491906137f2565b610d1d565b005b6103f3610d7f565b60405161040091906141b2565b60405180910390f35b610411610d93565b60405161041e91906141b2565b60405180910390f35b610441600480360381019061043c91906135a8565b610da7565b60405161044e9190613eb8565b60405180910390f35b610471600480360381019061046c91906132e8565b610e12565b005b61047b610e6c565b60405161048891906141b2565b60405180910390f35b610499610e80565b6040516104a69190613ed3565b60405180910390f35b6104c960048036038101906104c4919061349b565b610e87565b005b6104e560048036038101906104e091906134d7565b610e9d565b005b61050160048036038101906104fc91906136bf565b61156c565b60405161050e91906141cd565b60405180910390f35b610531600480360381019061052c91906136e8565b611589565b60405161053e9190613eee565b60405180910390f35b61054f611636565b60405161055c91906141b2565b60405180910390f35b61057f600480360381019061057a91906135a8565b61164a565b005b610589611673565b60405161059691906141b2565b60405180910390f35b6105b960048036038101906105b49190613311565b611687565b6040516105c69190613eb8565b60405180910390f35b6105e960048036038101906105e4919061340c565b61171b565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561065c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065390613fd2565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006106bf826117bc565b9050919050565b6006601c9054906101000a900461ffff1681565b6060600280546106e99061454e565b80601f01602080910402602001604051908101604052809291908181526020018280546107159061454e565b80156107625780601f1061073757610100808354040283529160200191610762565b820191906000526020600020905b81548152906001019060200180831161074557829003601f168201915b50505050509050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060046000838152602001908152602001600020600101549050919050565b60056020528060005260406000206000915090505481565b6107d4611836565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061081a575061081985610814611836565b611687565b5b610859576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085090614052565b60405180910390fd5b610866858585858561183e565b5050505050565b61087682610794565b61088781610882611836565b611b9e565b6108918383611c3b565b505050565b61089e611836565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090290614192565b60405180910390fd5b6109158282611d1c565b5050565b6000801b61092e81610929611836565b611b9e565b8561ffff168761ffff1610610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90613fb2565b60405180910390fd5b8461ffff168661ffff16106109c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b9906140b2565b60405180910390fd5b8361ffff168561ffff1610610a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a03906140d2565b60405180910390fd5b8261ffff168461ffff1610610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d90613ff2565b60405180910390fd5b8161ffff168361ffff161115610aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9890613f52565b60405180910390fd5b86600660146101000a81548161ffff021916908361ffff16021790555085600660166101000a81548161ffff021916908361ffff16021790555084600660186101000a81548161ffff021916908361ffff160217905550836006601a6101000a81548161ffff021916908361ffff160217905550826006601c6101000a81548161ffff021916908361ffff160217905550816006601e6101000a81548161ffff021916908361ffff16021790555050505050505050565b60608151835114610b9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9590614112565b60405180910390fd5b6000835167ffffffffffffffff811115610be1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610c0f5781602001602082028036833780820191505090505b50905060005b8451811015610cfe57610ca8858281518110610c5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110610c9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516105eb565b828281518110610ce1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080610cf7906145b1565b9050610c15565b508091505092915050565b600080610d158361156c565b119050919050565b6000801b610d3281610d2d611836565b611b9e565b8282810190610d419190613724565b50505082826007600088815260200190815260200160002060008781526020019081526020016000209190610d77929190612f29565b505050505050565b600660189054906101000a900461ffff1681565b600660169054906101000a900461ffff1681565b60006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b610e2781610e22611836565b611b9e565b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6006601a9054906101000a900461ffff1681565b6000801b81565b610e99610e92611836565b8383611dfe565b5050565b6201518042610eac9190614422565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2490614132565b60405180910390fd5b42600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000610f7c82611f6b565b905060006006601c9054906101000a900461ffff1661ffff1682610fa091906145fa565b9050600060606000600180811115610fe1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050600660149054906101000a900461ffff1661ffff168410156110405760006004811115611039577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611196565b600660169054906101000a900461ffff1661ffff1684101561109d5760016004811115611096577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611195565b600660189054906101000a900461ffff1661ffff168410156110fa57600260048111156110f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611194565b6006601a9054906101000a900461ffff1661ffff168410156111575760036004811115611150577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611193565b600480811115611190577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b92505b5b5b5b6004808111156111cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8314156111f7576111f28760018060405180602001604052806000815250611fa2565b611526565b600180811115611230577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61123987611f6b565b61124391906145fa565b9050600080600060076000858152602001908152602001600020600087815260200190815260200160002080546112799061454e565b80601f01602080910402602001604051908101604052809291908181526020018280546112a59061454e565b80156112f25780601f106112c7576101008083540402835291602001916112f2565b820191906000526020600020905b8154815290600101906020018083116112d557829003601f168201915b505050505080602001905181019061130a919061378b565b9250925092506000600184846113209190614422565b61132a9190614372565b6113338b611f6b565b61133d91906145fa565b846113489190614372565b905060006001811115611384577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b851415611447576000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634eb902998d846040518363ffffffff1660e01b81526004016113ed929190613dea565b600060405180830381600087803b15801561140757600080fd5b505af115801561141b573d6000803e3d6000fd5b505050508160405160200161143091906141cd565b604051602081830303815290604052965050611521565b600082516114548c611f6b565b61145e91906145fa565b90506114bb8c84838151811061149d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518460405180602001604052806000815250611fa2565b8281815181106114f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518260405160200161150e9291906141e8565b6040516020818303038152906040529650505b505050505b7f0abddb16689c98df752491657c9e586eff3198ece0269bcb57d4f690528e71a48782858560405161155b9493929190613e13565b60405180910390a150505050505050565b600060036000838152602001908152602001600020549050919050565b60076020528160005260406000206020528060005260406000206000915091505080546115b59061454e565b80601f01602080910402602001604051908101604052809291908181526020018280546115e19061454e565b801561162e5780601f106116035761010080835404028352916020019161162e565b820191906000526020600020905b81548152906001019060200180831161161157829003601f168201915b505050505081565b6006601e9054906101000a900461ffff1681565b61165382610794565b6116648161165f611836565b611b9e565b61166e8383611d1c565b505050565b600660149054906101000a900461ffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611723611836565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611769575061176885611763611836565b611687565b5b6117a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179f90614012565b60405180910390fd5b6117b58585858585612138565b5050505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061182f575061182e826123ba565b5b9050919050565b600033905090565b8151835114611882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187990614152565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156118f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e990614032565b60405180910390fd5b60006118fc611836565b905061190c81878787878761249c565b60005b8451811015611b09576000858281518110611953577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000858381518110611998577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3090614072565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611aee9190614372565b9250508190555050505080611b02906145b1565b905061190f565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b80929190613e81565b60405180910390a4611b96818787878787612706565b505050505050565b611ba88282610da7565b611c3757611bcd8173ffffffffffffffffffffffffffffffffffffffff1660146128ed565b611bdb8360001c60206128ed565b604051602001611bec929190613cd3565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2e9190613f10565b60405180910390fd5b5050565b611c458282610da7565b611d185760016004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611cbd611836565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611d268282610da7565b15611dfa5760006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611d9f611836565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e64906140f2565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611f5e9190613eb8565b60405180910390a3505050565b6000424483604051602001611f8293929190614211565b6040516020818303038152906040528051906020012060001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200990614172565b60405180910390fd5b600061201c611836565b905061203d8160008761202e88612be7565b61203788612be7565b8761249c565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461209c9190614372565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161211a9291906141e8565b60405180910390a461213181600087878787612cad565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156121a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219f90614032565b60405180910390fd5b60006121b2611836565b90506121d28187876121c388612be7565b6121cc88612be7565b8761249c565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226090614072565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461231e9190614372565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161239b9291906141e8565b60405180910390a46123b1828888888888612cad565b50505050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061248557507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612495575061249482612e94565b5b9050919050565b6124aa868686868686612efe565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156125a85760005b83518110156125a657828181518110612524577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160036000868481518110612569577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020600082825461258e9190614372565b925050819055508061259f906145b1565b90506124e2565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156126fe5760005b83518110156126fc576000848281518110612624577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000848381518110612669577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600060036000848152602001908152602001600020549050818110156126ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c590614092565b60405180910390fd5b8181036003600085815260200190815260200160002081905550505050806126f5906145b1565b90506125e0565b505b505050505050565b6127258473ffffffffffffffffffffffffffffffffffffffff16612f06565b156128e5578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161276b959493929190613d28565b602060405180830381600087803b15801561278557600080fd5b505af19250505080156127b657506040513d601f19601f820116820180604052508101906127b3919061360d565b60015b61285c576127c26146e7565b806308c379a0141561281f57506127d7614d59565b806127e25750612821565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128169190613f10565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285390613f32565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146128e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128da90613f92565b60405180910390fd5b505b505050505050565b60606000600283600261290091906143c8565b61290a9190614372565b67ffffffffffffffff811115612949577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561297b5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a63577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612aa391906143c8565b612aad9190614372565b90505b6001811115612b99577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612b15577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612b52577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612b9290614524565b9050612ab0565b5060008414612bdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd490613f72565b60405180910390fd5b8091505092915050565b60606000600167ffffffffffffffff811115612c2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612c5a5781602001602082028036833780820191505090505b5090508281600081518110612c98577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b612ccc8473ffffffffffffffffffffffffffffffffffffffff16612f06565b15612e8c578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612d12959493929190613d90565b602060405180830381600087803b158015612d2c57600080fd5b505af1925050508015612d5d57506040513d601f19601f82011682018060405250810190612d5a919061360d565b60015b612e0357612d696146e7565b806308c379a01415612dc65750612d7e614d59565b80612d895750612dc8565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dbd9190613f10565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dfa90613f32565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e8190613f92565b60405180910390fd5b505b505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612f359061454e565b90600052602060002090601f016020900481019282612f575760008555612f9e565b82601f10612f7057803560ff1916838001178555612f9e565b82800160010185558215612f9e579182015b82811115612f9d578235825591602001919060010190612f82565b5b509050612fab9190612faf565b5090565b5b80821115612fc8576000816000905550600101612fb0565b5090565b6000612fdf612fda8461426d565b614248565b90508083825260208201905082856020860282011115612ffe57600080fd5b60005b8581101561302e5781613014888261314e565b845260208401935060208301925050600181019050613001565b5050509392505050565b600061304b61304684614299565b614248565b9050808382526020820190508285602086028201111561306a57600080fd5b60005b8581101561309a578161308088826132be565b84526020840193506020830192505060018101905061306d565b5050509392505050565b60006130b76130b284614299565b614248565b905080838252602082019050828560208602820111156130d657600080fd5b60005b8581101561310657816130ec88826132d3565b8452602084019350602083019250506001810190506130d9565b5050509392505050565b600061312361311e846142c5565b614248565b90508281526020810184848401111561313b57600080fd5b6131468482856144e2565b509392505050565b60008135905061315d81614def565b92915050565b600082601f83011261317457600080fd5b8135613184848260208601612fcc565b91505092915050565b600082601f83011261319e57600080fd5b81356131ae848260208601613038565b91505092915050565b600082601f8301126131c857600080fd5b81516131d88482602086016130a4565b91505092915050565b6000813590506131f081614e06565b92915050565b60008135905061320581614e1d565b92915050565b60008135905061321a81614e34565b92915050565b60008151905061322f81614e34565b92915050565b60008083601f84011261324757600080fd5b8235905067ffffffffffffffff81111561326057600080fd5b60208301915083600182028301111561327857600080fd5b9250929050565b600082601f83011261329057600080fd5b81356132a0848260208601613110565b91505092915050565b6000813590506132b881614e4b565b92915050565b6000813590506132cd81614e62565b92915050565b6000815190506132e281614e62565b92915050565b6000602082840312156132fa57600080fd5b60006133088482850161314e565b91505092915050565b6000806040838503121561332457600080fd5b60006133328582860161314e565b92505060206133438582860161314e565b9150509250929050565b600080600080600060a0868803121561336557600080fd5b60006133738882890161314e565b95505060206133848882890161314e565b945050604086013567ffffffffffffffff8111156133a157600080fd5b6133ad8882890161318d565b935050606086013567ffffffffffffffff8111156133ca57600080fd5b6133d68882890161318d565b925050608086013567ffffffffffffffff8111156133f357600080fd5b6133ff8882890161327f565b9150509295509295909350565b600080600080600060a0868803121561342457600080fd5b60006134328882890161314e565b95505060206134438882890161314e565b9450506040613454888289016132be565b9350506060613465888289016132be565b925050608086013567ffffffffffffffff81111561348257600080fd5b61348e8882890161327f565b9150509295509295909350565b600080604083850312156134ae57600080fd5b60006134bc8582860161314e565b92505060206134cd858286016131e1565b9150509250929050565b600080604083850312156134ea57600080fd5b60006134f88582860161314e565b9250506020613509858286016132be565b9150509250929050565b6000806040838503121561352657600080fd5b600083013567ffffffffffffffff81111561354057600080fd5b61354c85828601613163565b925050602083013567ffffffffffffffff81111561356957600080fd5b6135758582860161318d565b9150509250929050565b60006020828403121561359157600080fd5b600061359f848285016131f6565b91505092915050565b600080604083850312156135bb57600080fd5b60006135c9858286016131f6565b92505060206135da8582860161314e565b9150509250929050565b6000602082840312156135f657600080fd5b60006136048482850161320b565b91505092915050565b60006020828403121561361f57600080fd5b600061362d84828501613220565b91505092915050565b60008060008060008060c0878903121561364f57600080fd5b600061365d89828a016132a9565b965050602061366e89828a016132a9565b955050604061367f89828a016132a9565b945050606061369089828a016132a9565b93505060806136a189828a016132a9565b92505060a06136b289828a016132a9565b9150509295509295509295565b6000602082840312156136d157600080fd5b60006136df848285016132be565b91505092915050565b600080604083850312156136fb57600080fd5b6000613709858286016132be565b925050602061371a858286016132be565b9150509250929050565b60008060006060848603121561373957600080fd5b6000613747868287016132be565b9350506020613758868287016132be565b925050604084013567ffffffffffffffff81111561377557600080fd5b6137818682870161318d565b9150509250925092565b6000806000606084860312156137a057600080fd5b60006137ae868287016132d3565b93505060206137bf868287016132d3565b925050604084015167ffffffffffffffff8111156137dc57600080fd5b6137e8868287016131b7565b9150509250925092565b6000806000806060858703121561380857600080fd5b6000613816878288016132be565b9450506020613827878288016132be565b935050604085013567ffffffffffffffff81111561384457600080fd5b61385087828801613235565b925092505092959194509250565b600061386a8383613cb5565b60208301905092915050565b61387f81614456565b82525050565b600061389082614306565b61389a8185614334565b93506138a5836142f6565b8060005b838110156138d65781516138bd888261385e565b97506138c883614327565b9250506001810190506138a9565b5085935050505092915050565b6138ec81614468565b82525050565b6138fb81614474565b82525050565b600061390c82614311565b6139168185614345565b93506139268185602086016144f1565b61392f81614709565b840191505092915050565b60006139458261431c565b61394f8185614356565b935061395f8185602086016144f1565b61396881614709565b840191505092915050565b600061397e8261431c565b6139888185614367565b93506139988185602086016144f1565b80840191505092915050565b60006139b1603483614356565b91506139bc82614727565b604082019050919050565b60006139d4604883614356565b91506139df82614776565b606082019050919050565b60006139f7602083614356565b9150613a02826147eb565b602082019050919050565b6000613a1a602883614356565b9150613a2582614814565b604082019050919050565b6000613a3d602683614356565b9150613a4882614863565b604082019050919050565b6000613a60602b83614356565b9150613a6b826148b2565b604082019050919050565b6000613a83602583614356565b9150613a8e82614901565b604082019050919050565b6000613aa6602983614356565b9150613ab182614950565b604082019050919050565b6000613ac9602583614356565b9150613ad48261499f565b604082019050919050565b6000613aec603283614356565b9150613af7826149ee565b604082019050919050565b6000613b0f602a83614356565b9150613b1a82614a3d565b604082019050919050565b6000613b32602883614356565b9150613b3d82614a8c565b604082019050919050565b6000613b55602483614356565b9150613b6082614adb565b604082019050919050565b6000613b78602083614356565b9150613b8382614b2a565b602082019050919050565b6000613b9b601783614367565b9150613ba682614b53565b601782019050919050565b6000613bbe602983614356565b9150613bc982614b7c565b604082019050919050565b6000613be1602983614356565b9150613bec82614bcb565b604082019050919050565b6000613c04601283614356565b9150613c0f82614c1a565b602082019050919050565b6000613c27602883614356565b9150613c3282614c43565b604082019050919050565b6000613c4a602183614356565b9150613c5582614c92565b604082019050919050565b6000613c6d601183614367565b9150613c7882614ce1565b601182019050919050565b6000613c90602f83614356565b9150613c9b82614d0a565b604082019050919050565b613caf816144aa565b82525050565b613cbe816144d8565b82525050565b613ccd816144d8565b82525050565b6000613cde82613b8e565b9150613cea8285613973565b9150613cf582613c60565b9150613d018284613973565b91508190509392505050565b6000602082019050613d226000830184613876565b92915050565b600060a082019050613d3d6000830188613876565b613d4a6020830187613876565b8181036040830152613d5c8186613885565b90508181036060830152613d708185613885565b90508181036080830152613d848184613901565b90509695505050505050565b600060a082019050613da56000830188613876565b613db26020830187613876565b613dbf6040830186613cc4565b613dcc6060830185613cc4565b8181036080830152613dde8184613901565b90509695505050505050565b6000604082019050613dff6000830185613876565b613e0c6020830184613cc4565b9392505050565b6000608082019050613e286000830187613876565b613e356020830186613cc4565b613e426040830185613cc4565b8181036060830152613e548184613901565b905095945050505050565b60006020820190508181036000830152613e798184613885565b905092915050565b60006040820190508181036000830152613e9b8185613885565b90508181036020830152613eaf8184613885565b90509392505050565b6000602082019050613ecd60008301846138e3565b92915050565b6000602082019050613ee860008301846138f2565b92915050565b60006020820190508181036000830152613f088184613901565b905092915050565b60006020820190508181036000830152613f2a818461393a565b905092915050565b60006020820190508181036000830152613f4b816139a4565b9050919050565b60006020820190508181036000830152613f6b816139c7565b9050919050565b60006020820190508181036000830152613f8b816139ea565b9050919050565b60006020820190508181036000830152613fab81613a0d565b9050919050565b60006020820190508181036000830152613fcb81613a30565b9050919050565b60006020820190508181036000830152613feb81613a53565b9050919050565b6000602082019050818103600083015261400b81613a76565b9050919050565b6000602082019050818103600083015261402b81613a99565b9050919050565b6000602082019050818103600083015261404b81613abc565b9050919050565b6000602082019050818103600083015261406b81613adf565b9050919050565b6000602082019050818103600083015261408b81613b02565b9050919050565b600060208201905081810360008301526140ab81613b25565b9050919050565b600060208201905081810360008301526140cb81613b48565b9050919050565b600060208201905081810360008301526140eb81613b6b565b9050919050565b6000602082019050818103600083015261410b81613bb1565b9050919050565b6000602082019050818103600083015261412b81613bd4565b9050919050565b6000602082019050818103600083015261414b81613bf7565b9050919050565b6000602082019050818103600083015261416b81613c1a565b9050919050565b6000602082019050818103600083015261418b81613c3d565b9050919050565b600060208201905081810360008301526141ab81613c83565b9050919050565b60006020820190506141c76000830184613ca6565b92915050565b60006020820190506141e26000830184613cc4565b92915050565b60006040820190506141fd6000830185613cc4565b61420a6020830184613cc4565b9392505050565b60006060820190506142266000830186613cc4565b6142336020830185613cc4565b6142406040830184613cc4565b949350505050565b6000614252614263565b905061425e8282614580565b919050565b6000604051905090565b600067ffffffffffffffff821115614288576142876146b8565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156142b4576142b36146b8565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156142e0576142df6146b8565b5b6142e982614709565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061437d826144d8565b9150614388836144d8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143bd576143bc61462b565b5b828201905092915050565b60006143d3826144d8565b91506143de836144d8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156144175761441661462b565b5b828202905092915050565b600061442d826144d8565b9150614438836144d8565b92508282101561444b5761444a61462b565b5b828203905092915050565b6000614461826144b8565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561450f5780820151818401526020810190506144f4565b8381111561451e576000848401525b50505050565b600061452f826144d8565b915060008214156145435761454261462b565b5b600182039050919050565b6000600282049050600182168061456657607f821691505b6020821081141561457a57614579614689565b5b50919050565b61458982614709565b810181811067ffffffffffffffff821117156145a8576145a76146b8565b5b80604052505050565b60006145bc826144d8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156145ef576145ee61462b565b5b600182019050919050565b6000614605826144d8565b9150614610836144d8565b9250826146205761461f61465a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156147065760046000803e61470360005161471a565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f4c6567656e6461727920726172697479206c6576656c206d757374206265206c60008201527f657373207468616e206f7220657175616c20746f20746865206d61782072617260208201527f69747920726f6c6c000000000000000000000000000000000000000000000000604082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f436f6d6d6f6e206d757374206265206c6573732072617265207468616e20756e60008201527f636f6d6d6f6e0000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f45706963206d757374206265206c6573732072617265207468616e206c65676560008201527f6e64617279000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b7f556e636f6d6d6f6e206d757374206265206c6573732072617265207468616e2060008201527f7261726500000000000000000000000000000000000000000000000000000000602082015250565b7f52617265206d757374206265206c6573732072617265207468616e2065706963600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f436c61696d206f6e636520706572206461790000000000000000000000000000600082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600060443d1015614d6957614dec565b614d71614263565b60043d036004823e80513d602482011167ffffffffffffffff82111715614d99575050614dec565b808201805167ffffffffffffffff811115614db75750505050614dec565b80602083010160043d038501811115614dd4575050505050614dec565b614de382602001850186614580565b82955050505050505b90565b614df881614456565b8114614e0357600080fd5b50565b614e0f81614468565b8114614e1a57600080fd5b50565b614e2681614474565b8114614e3157600080fd5b50565b614e3d8161447e565b8114614e4857600080fd5b50565b614e54816144aa565b8114614e5f57600080fd5b50565b614e6b816144d8565b8114614e7657600080fd5b5056fea26469706673582212201eb9dc693fadfb68de7ceb6b068f63c330b0e97682ddd811007e7a5720de923764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)": {
        "params": {
          "common": "- rarity level of common quests",
          "epic": "- rarity level of epic quests",
          "legendary": "- rarity level of legendary quests",
          "maxRoll": "- max rarity level",
          "rare": "- rarity level of rare quests",
          "uncommon": "- rarity level of uncommon quests"
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "_commonRoll": {
        "details": "Rarity rolls"
      },
      "_lastUpdate": {
        "details": "Track last time a claim was made for a specific pet"
      },
      "_rewardMapping": {
        "details": "rewardType => (rewardRarity => data)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)": {
        "notice": "returns the rarity level set for each rarity, and the maximum roll"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 407,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 413,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 415,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2221,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2389,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_lastUpdate",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2391,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_milkContractAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2395,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_commonRoll",
        "offset": 20,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 2398,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_uncommonRoll",
        "offset": 22,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 2401,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_rareRoll",
        "offset": 24,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 2404,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_epicRoll",
        "offset": 26,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 2407,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_legendaryRoll",
        "offset": 28,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 2409,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_maxRarityRoll",
        "offset": 30,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 2425,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_rewardMapping",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bytes_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/itemFactory.sol:ItemFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/itemFactory.sol:ItemFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}