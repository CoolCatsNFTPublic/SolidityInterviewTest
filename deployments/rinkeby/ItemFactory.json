{
  "address": "0xc7Bc000606EC3de9dDC6BeD9e4Ec58BD5B0FaA5B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardRarity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "rewardData",
          "type": "bytes"
        }
      ],
      "name": "LogDailyClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_commonRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_epicRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_lastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_legendaryRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_maxRarityRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_milkContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_rareRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_uncommonRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entropy",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "milkContractAddress",
          "type": "address"
        }
      ],
      "name": "setMilkContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "common",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "uncommon",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "rare",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "epic",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "legendary",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxRoll",
          "type": "uint16"
        }
      ],
      "name": "setRarityRolls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardRarity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "rewardData",
          "type": "bytes"
        }
      ],
      "name": "setReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x63f0bdf83a78089f55e8a8461dd4efd95b08609872ae1f2eb70402586d8a0d50",
  "receipt": {
    "to": null,
    "from": "0x8Fa8D87C6A85bb94C8473f7E54f9e14d54DF5e2e",
    "contractAddress": "0xc7Bc000606EC3de9dDC6BeD9e4Ec58BD5B0FaA5B",
    "transactionIndex": 19,
    "gasUsed": "4472429",
    "logsBloom": "0x
    "blockHash": "0x0bf5263a3f3b2fc5872ce80846cc4dc9df663410d6d0645f500c02fdc3df8748",
    "transactionHash": "0x63f0bdf83a78089f55e8a8461dd4efd95b08609872ae1f2eb70402586d8a0d50",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 10343465,
        "transactionHash": "0x63f0bdf83a78089f55e8a8461dd4efd95b08609872ae1f2eb70402586d8a0d50",
        "address": "0xc7Bc000606EC3de9dDC6BeD9e4Ec58BD5B0FaA5B",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008fa8d87c6a85bb94c8473f7e54f9e14d54df5e2e",
          "0x0000000000000000000000008fa8d87c6a85bb94c8473f7e54f9e14d54df5e2e"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x0bf5263a3f3b2fc5872ce80846cc4dc9df663410d6d0645f500c02fdc3df8748"
      }
    ],
    "blockNumber": 10343465,
    "cumulativeGasUsed": "10723401",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://ipfs.io/ipfs/QmQtN81i9eNrD3wxcr67scDpLvZDDXxbmAvNXMaZh3D6tB/"
  ],
  "numDeployments": 3,
  "solcInputHash": "52d013e4fc33f0a64c4416cc4400cb58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRarity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"rewardData\",\"type\":\"bytes\"}],\"name\":\"LogDailyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_commonRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_epicRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_legendaryRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxRarityRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_milkContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rareRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uncommonRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"milkContractAddress\",\"type\":\"address\"}],\"name\":\"setMilkContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"common\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"uncommon\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rare\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"epic\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"legendary\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxRoll\",\"type\":\"uint16\"}],\"name\":\"setRarityRolls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRarity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rewardData\",\"type\":\"bytes\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)\":{\"params\":{\"common\":\"- rarity level of common quests\",\"epic\":\"- rarity level of epic quests\",\"legendary\":\"- rarity level of legendary quests\",\"maxRoll\":\"- max rarity level\",\"rare\":\"- rarity level of rare quests\",\"uncommon\":\"- rarity level of uncommon quests\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"_commonRoll\":{\"details\":\"Rarity rolls\"},\"_lastUpdate\":{\"details\":\"Track last time a claim was made for a specific pet\"},\"_rewardMapping\":{\"details\":\"rewardType => (rewardRarity => data)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)\":{\"notice\":\"returns the rarity level set for each rarity, and the maximum roll\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/itemFactory.sol\":\"ItemFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/common/ERC1155SupplyCC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\r\\n *\\r\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\r\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\r\\n * corresponding is an NFT, there is no guarantees that no other token with the\\r\\n * same id are not going to be minted.\\r\\n */\\r\\nabstract contract ERC1155SupplyCC is ERC1155 {\\r\\n    mapping(uint256 => uint256) private _totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev Total amount of tokens in with a given id.\\r\\n     */\\r\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\r\\n        return _totalSupply[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates whether any token exist with a given id, or not.\\r\\n     */\\r\\n    function exists(uint256 id) public view virtual returns (bool) {\\r\\n        return ERC1155SupplyCC.totalSupply(id) > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            for (uint256 i = 0; i < ids.length; ++i) {\\r\\n                _totalSupply[ids[i]] += amounts[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (to == address(0)) {\\r\\n            for (uint256 i = 0; i < ids.length; ++i) {\\r\\n                uint256 id = ids[i];\\r\\n                uint256 amount = amounts[i];\\r\\n                uint256 supply = _totalSupply[id];\\r\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\r\\n                unchecked {\\r\\n                    _totalSupply[id] = supply - amount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaa2f79f09a8c7bcda178fd32f5d5cd90ab05d33c4483d35ed3be8932f8703a95\",\"license\":\"MIT\"},\"contracts/itemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./common/ERC1155SupplyCC.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ninterface Milk {\\r\\n    function gameMint(address, uint256) external;\\r\\n}\\r\\n\\r\\ncontract ItemFactory is ERC1155SupplyCC, AccessControl {\\r\\n\\r\\n    /// @dev Track last time a claim was made for a specific pet\\r\\n    mapping(address => uint256) public _lastUpdate;\\r\\n\\r\\n    address public _milkContractAddress;\\r\\n\\r\\n    /// @dev Rarity rolls\\r\\n    uint16 public _commonRoll = 60;\\r\\n    uint16 public _uncommonRoll = 80;\\r\\n    uint16 public _rareRoll = 90;\\r\\n    uint16 public _epicRoll = 98;\\r\\n    uint16 public _legendaryRoll = 100;\\r\\n    uint16 public _maxRarityRoll;\\r\\n\\r\\n    enum ERarity {\\r\\n        COMMON, UNCOMMON, RARE, EPIC, LEGENDARY\\r\\n    }\\r\\n\\r\\n    enum EType {\\r\\n        MILK, BOX\\r\\n    }\\r\\n\\r\\n    /// @dev rewardType => (rewardRarity => data)\\r\\n    mapping(uint256 => mapping(uint256 => bytes)) _rewardMapping;\\r\\n\\r\\n    event LogDailyClaim(address claimer, uint256 rewardType, uint256 rewardRarity, bytes rewardData);\\r\\n\\r\\n    constructor(string memory uri) ERC1155(uri) {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    function setMilkContractAddress(address milkContractAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _milkContractAddress = milkContractAddress;\\r\\n    }\\r\\n\\r\\n    function claim(address claimer, uint256 entropy) external {\\r\\n        require(_lastUpdate[claimer] <= block.timestamp - 1 days, \\\"An address can only claim once per day\\\");\\r\\n        // Claims are specific to the that pet, not the claimer or a combination of claimer and pet\\r\\n        _lastUpdate[claimer] = block.timestamp;\\r\\n\\r\\n        // generate a single random number and bit shift as needed\\r\\n        uint256 randNum = randomNum(entropy);\\r\\n\\r\\n        // roll and pick the rarity level of the reward\\r\\n        uint256 randRarity = randNum % _legendaryRoll;\\r\\n        uint256 rewardRarity;\\r\\n        bytes memory rewardData;\\r\\n        uint256 rewardType = uint256(EType.BOX);\\r\\n\\r\\n        // pick rarity based on rarity chances\\r\\n        if (randRarity < _commonRoll) {\\r\\n            rewardRarity = uint256(ERarity.COMMON);\\r\\n        } else if (randRarity < _uncommonRoll) {\\r\\n            rewardRarity = uint256(ERarity.UNCOMMON);\\r\\n        } else if (randRarity < _rareRoll) {\\r\\n            rewardRarity = uint256(ERarity.RARE);\\r\\n        } else if (randRarity < _epicRoll) {\\r\\n            rewardRarity = uint256(ERarity.EPIC);\\r\\n        } else {\\r\\n            rewardRarity = uint256(ERarity.LEGENDARY);\\r\\n        }\\r\\n\\r\\n        // handle Legendary on its own\\r\\n        // always a box\\r\\n        if (rewardRarity == uint256(ERarity.LEGENDARY)) {\\r\\n            // give the user a box\\r\\n            _mint(claimer, 1, 1, \\\"\\\");\\r\\n        }\\r\\n\\r\\n        // handle MILK or ITEMS\\r\\n        else {\\r\\n            // This will pick a random number between 0 and 1 inc.\\r\\n            // MILK or ITEMS.\\r\\n            rewardType = randomNum(entropy) % uint256(EType.BOX);\\r\\n\\r\\n            // convert the reward mapping data to min and max\\r\\n            (uint256 min, uint256 max, uint256[] memory ids) = abi.decode(\\r\\n                _rewardMapping[rewardType][rewardRarity], (uint256, uint256, uint256[])\\r\\n            );\\r\\n\\r\\n            // do some bit shifting magic to create random min max\\r\\n            uint256 rewardAmount = min + (randomNum(entropy)) % (max - min + 1);\\r\\n\\r\\n            // Give a MILK reward\\r\\n            if (rewardType == uint256(EType.MILK)) {\\r\\n                Milk milk = Milk(_milkContractAddress);\\r\\n                milk.gameMint(claimer, rewardAmount);\\r\\n                rewardData = abi.encode(rewardAmount);\\r\\n            }\\r\\n\\r\\n            // Give an item reward\\r\\n            else {\\r\\n                uint256 index = (randomNum(entropy)) % ids.length;\\r\\n                _mint(claimer, ids[index], rewardAmount, \\\"\\\");\\r\\n                rewardData = abi.encode(ids[index], rewardAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LogDailyClaim(claimer, rewardType, rewardRarity, rewardData);\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function randomNum(uint entropy) internal view returns (uint256) {\\r\\n        return uint256(keccak256(abi.encode(block.timestamp, block.difficulty, entropy)));\\r\\n    }\\r\\n\\r\\n\\r\\n    /** SETTERS */\\r\\n\\r\\n    /// @notice returns the rarity level set for each rarity, and the maximum roll\\r\\n    /// @param common - rarity level of common quests\\r\\n    /// @param uncommon - rarity level of uncommon quests\\r\\n    /// @param rare - rarity level of rare quests\\r\\n    /// @param epic - rarity level of epic quests\\r\\n    /// @param legendary - rarity level of legendary quests\\r\\n    /// @param maxRoll - max rarity level\\r\\n    function setRarityRolls(\\r\\n        uint16 common,\\r\\n        uint16 uncommon,\\r\\n        uint16 rare,\\r\\n        uint16 epic,\\r\\n        uint16 legendary,\\r\\n        uint16 maxRoll\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(common < uncommon, \\\"Common must be less rare than uncommon\\\");\\r\\n        require(uncommon < rare, \\\"Uncommon must be less rare than rare\\\");\\r\\n        require(rare < epic, \\\"Rare must be less rare than epic\\\");\\r\\n        require(epic < legendary, \\\"Epic must be less rare than legendary\\\");\\r\\n        require(legendary <= maxRoll, \\\"Legendary rarity level must be less than or equal to the max rarity roll\\\");\\r\\n\\r\\n        _commonRoll = common;\\r\\n        _uncommonRoll = uncommon;\\r\\n        _rareRoll = rare;\\r\\n        _epicRoll = epic;\\r\\n        _legendaryRoll = legendary;\\r\\n        _maxRarityRoll = maxRoll;\\r\\n    }\\r\\n\\r\\n    function setReward(uint256 rewardType, uint256 rewardRarity, bytes calldata rewardData) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        abi.decode(\\r\\n            rewardData, (uint256, uint256, uint256[])\\r\\n        );\\r\\n        _rewardMapping[rewardType][rewardRarity] = rewardData;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, AccessControl) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1575ea90a7eb1bd1e043931ae3d2fe879818ba0a936f329727cb3f9c6e5d6de2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052603c600660146101000a81548161ffff021916908361ffff1602179055506050600660166101000a81548161ffff021916908361ffff160217905550605a600660186101000a81548161ffff021916908361ffff16021790555060626006601a6101000a81548161ffff021916908361ffff16021790555060646006601c6101000a81548161ffff021916908361ffff160217905550348015620000a757600080fd5b5060405162005318380380620053188339818101604052810190620000cd9190620003c4565b80620000df816200010b60201b60201c565b50620001046000801b620000f86200012760201b60201c565b6200012f60201b60201c565b5062000579565b806002908051906020019062000123929190620002a2565b5050565b600033905090565b6200014182826200014560201b60201c565b5050565b6200015782826200023760201b60201c565b620002335760016004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001d86200012760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054620002b0906200049e565b90600052602060002090601f016020900481019282620002d4576000855562000320565b82601f10620002ef57805160ff191683800117855562000320565b8280016001018555821562000320579182015b828111156200031f57825182559160200191906001019062000302565b5b5090506200032f919062000333565b5090565b5b808211156200034e57600081600090555060010162000334565b5090565b600062000369620003638462000432565b62000409565b9050828152602081018484840111156200038257600080fd5b6200038f84828562000468565b509392505050565b600082601f830112620003a957600080fd5b8151620003bb84826020860162000352565b91505092915050565b600060208284031215620003d757600080fd5b600082015167ffffffffffffffff811115620003f257600080fd5b620004008482850162000397565b91505092915050565b60006200041562000428565b9050620004238282620004d4565b919050565b6000604051905090565b600067ffffffffffffffff82111562000450576200044f62000539565b5b6200045b8262000568565b9050602081019050919050565b60005b83811015620004885780820151818401526020810190506200046b565b8381111562000498576000848401525b50505050565b60006002820490506001821680620004b757607f821691505b60208210811415620004ce57620004cd6200050a565b5b50919050565b620004df8262000568565b810181811067ffffffffffffffff8211171562000501576200050062000539565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b614d8f80620005896000396000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c80636a6b6ed8116100f9578063aad3ec9611610097578063d547741f11610071578063d547741f1461052a578063db43235b14610546578063e985e9c514610564578063f242432a14610594576101c3565b8063aad3ec96146104c0578063bd85b039146104dc578063d44c46701461050c576101c3565b80639a6a8888116100d35780639a6a88881461044c5780639beccd5f14610468578063a217fddf14610486578063a22cb465146104a4576101c3565b80636a6b6ed8146103e0578063710d2b15146103fe57806391d148541461041c576101c3565b80632eb2c2d61161016657806340a32dc51161014057806340a32dc5146103485780634e1273f4146103645780634f558e79146103945780635d5d588c146103c4576101c3565b80632eb2c2d6146102f45780632f2ff15d1461031057806336568abe1461032c576101c3565b80630e89341c116101a25780630e89341c1461024657806313ca915714610276578063248a9ca3146102945780632d7e79e0146102c4576101c3565b8062fdd58e146101c857806301ffc9a7146101f857806309c3bf7214610228575b600080fd5b6101e260048036038101906101dd91906133ef565b6105b0565b6040516101ef9190614087565b60405180910390f35b610212600480360381019061020d91906134fc565b610679565b60405161021f9190613d94565b60405180910390f35b61023061068b565b60405161023d919061406c565b60405180910390f35b610260600480360381019061025b91906135d7565b61069f565b60405161026d9190613dca565b60405180910390f35b61027e610733565b60405161028b9190613be9565b60405180910390f35b6102ae60048036038101906102a99190613497565b610759565b6040516102bb9190613daf565b60405180910390f35b6102de60048036038101906102d99190613200565b610779565b6040516102eb9190614087565b60405180910390f35b61030e60048036038101906103099190613265565b610791565b005b61032a600480360381019061032591906134c0565b610832565b005b610346600480360381019061034191906134c0565b61085b565b005b610362600480360381019061035d919061354e565b6108de565b005b61037e6004803603810190610379919061342b565b610b1d565b60405161038b9190613d3b565b60405180910390f35b6103ae60048036038101906103a991906135d7565b610cce565b6040516103bb9190613d94565b60405180910390f35b6103de60048036038101906103d991906136ce565b610ce2565b005b6103e8610d44565b6040516103f5919061406c565b60405180910390f35b610406610d58565b604051610413919061406c565b60405180910390f35b610436600480360381019061043191906134c0565b610d6c565b6040516104439190613d94565b60405180910390f35b61046660048036038101906104619190613200565b610dd7565b005b610470610e31565b60405161047d919061406c565b60405180910390f35b61048e610e45565b60405161049b9190613daf565b60405180910390f35b6104be60048036038101906104b991906133b3565b610e4c565b005b6104da60048036038101906104d591906133ef565b610e62565b005b6104f660048036038101906104f191906135d7565b611531565b6040516105039190614087565b60405180910390f35b61051461154e565b604051610521919061406c565b60405180910390f35b610544600480360381019061053f91906134c0565b611562565b005b61054e61158b565b60405161055b919061406c565b60405180910390f35b61057e60048036038101906105799190613229565b61159f565b60405161058b9190613d94565b60405180910390f35b6105ae60048036038101906105a99190613324565b611633565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890613e8c565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000610684826116d4565b9050919050565b6006601c9054906101000a900461ffff1681565b6060600280546106ae90614408565b80601f01602080910402602001604051908101604052809291908181526020018280546106da90614408565b80156107275780601f106106fc57610100808354040283529160200191610727565b820191906000526020600020905b81548152906001019060200180831161070a57829003601f168201915b50505050509050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060046000838152602001908152602001600020600101549050919050565b60056020528060005260406000206000915090505481565b61079961174e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806107df57506107de856107d961174e565b61159f565b5b61081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081590613f0c565b60405180910390fd5b61082b8585858585611756565b5050505050565b61083b82610759565b61084c8161084761174e565b611ab6565b6108568383611b53565b505050565b61086361174e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c79061404c565b60405180910390fd5b6108da8282611c34565b5050565b6000801b6108f3816108ee61174e565b611ab6565b8561ffff168761ffff161061093d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093490613e6c565b60405180910390fd5b8461ffff168661ffff1610610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e90613f8c565b60405180910390fd5b8361ffff168561ffff16106109d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c890613fac565b60405180910390fd5b8261ffff168461ffff1610610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1290613eac565b60405180910390fd5b8161ffff168361ffff161115610a66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5d90613e0c565b60405180910390fd5b86600660146101000a81548161ffff021916908361ffff16021790555085600660166101000a81548161ffff021916908361ffff16021790555084600660186101000a81548161ffff021916908361ffff160217905550836006601a6101000a81548161ffff021916908361ffff160217905550826006601c6101000a81548161ffff021916908361ffff160217905550816006601e6101000a81548161ffff021916908361ffff16021790555050505050505050565b60608151835114610b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5a90613fec565b60405180910390fd5b6000835167ffffffffffffffff811115610ba6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610bd45781602001602082028036833780820191505090505b50905060005b8451811015610cc357610c6d858281518110610c1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110610c60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516105b0565b828281518110610ca6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080610cbc9061446b565b9050610bda565b508091505092915050565b600080610cda83611531565b119050919050565b6000801b610cf781610cf261174e565b611ab6565b8282810190610d069190613600565b50505082826007600088815260200190815260200160002060008781526020019081526020016000209190610d3c929190612e41565b505050505050565b600660189054906101000a900461ffff1681565b600660169054906101000a900461ffff1681565b60006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b610dec81610de761174e565b611ab6565b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6006601a9054906101000a900461ffff1681565b6000801b81565b610e5e610e5761174e565b8383611d16565b5050565b6201518042610e7191906142dc565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee990613f6c565b60405180910390fd5b42600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000610f4182611e83565b905060006006601c9054906101000a900461ffff1661ffff1682610f6591906144b4565b9050600060606000600180811115610fa6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050600660149054906101000a900461ffff1661ffff168410156110055760006004811115610ffe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b925061115b565b600660169054906101000a900461ffff1661ffff16841015611062576001600481111561105b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b925061115a565b600660189054906101000a900461ffff1661ffff168410156110bf57600260048111156110b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611159565b6006601a9054906101000a900461ffff1661ffff1684101561111c5760036004811115611115577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611158565b600480811115611155577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b92505b5b5b5b600480811115611194577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8314156111bc576111b78760018060405180602001604052806000815250611eba565b6114eb565b6001808111156111f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6111fe87611e83565b61120891906144b4565b90506000806000600760008581526020019081526020016000206000878152602001908152602001600020805461123e90614408565b80601f016020809104026020016040519081016040528092919081815260200182805461126a90614408565b80156112b75780601f1061128c576101008083540402835291602001916112b7565b820191906000526020600020905b81548152906001019060200180831161129a57829003601f168201915b50505050508060200190518101906112cf9190613667565b9250925092506000600184846112e591906142dc565b6112ef919061422c565b6112f88b611e83565b61130291906144b4565b8461130d919061422c565b905060006001811115611349577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b85141561140c576000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634eb902998d846040518363ffffffff1660e01b81526004016113b2929190613cc6565b600060405180830381600087803b1580156113cc57600080fd5b505af11580156113e0573d6000803e3d6000fd5b50505050816040516020016113f59190614087565b6040516020818303038152906040529650506114e6565b600082516114198c611e83565b61142391906144b4565b90506114808c848381518110611462577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518460405180602001604052806000815250611eba565b8281815181106114b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826040516020016114d39291906140a2565b6040516020818303038152906040529650505b505050505b7f0abddb16689c98df752491657c9e586eff3198ece0269bcb57d4f690528e71a4878285856040516115209493929190613cef565b60405180910390a150505050505050565b600060036000838152602001908152602001600020549050919050565b6006601e9054906101000a900461ffff1681565b61156b82610759565b61157c8161157761174e565b611ab6565b6115868383611c34565b505050565b600660149054906101000a900461ffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61163b61174e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061168157506116808561167b61174e565b61159f565b5b6116c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b790613ecc565b60405180910390fd5b6116cd8585858585612050565b5050505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806117475750611746826122d2565b5b9050919050565b600033905090565b815183511461179a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117919061400c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561180a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180190613eec565b60405180910390fd5b600061181461174e565b90506118248187878787876123b4565b60005b8451811015611a2157600085828151811061186b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008583815181106118b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194890613f2c565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a06919061422c565b9250508190555050505080611a1a9061446b565b9050611827565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a98929190613d5d565b60405180910390a4611aae81878787878761261e565b505050505050565b611ac08282610d6c565b611b4f57611ae58173ffffffffffffffffffffffffffffffffffffffff166014612805565b611af38360001c6020612805565b604051602001611b04929190613baf565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b469190613dca565b60405180910390fd5b5050565b611b5d8282610d6c565b611c305760016004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611bd561174e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611c3e8282610d6c565b15611d125760006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611cb761174e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7c90613fcc565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e769190613d94565b60405180910390a3505050565b6000424483604051602001611e9a939291906140cb565b6040516020818303038152906040528051906020012060001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611f2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f219061402c565b60405180910390fd5b6000611f3461174e565b9050611f5581600087611f4688612aff565b611f4f88612aff565b876123b4565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fb4919061422c565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516120329291906140a2565b60405180910390a461204981600087878787612bc5565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156120c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b790613eec565b60405180910390fd5b60006120ca61174e565b90506120ea8187876120db88612aff565b6120e488612aff565b876123b4565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217890613f2c565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612236919061422c565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516122b39291906140a2565b60405180910390a46122c9828888888888612bc5565b50505050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061239d57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806123ad57506123ac82612dac565b5b9050919050565b6123c2868686868686612e16565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156124c05760005b83518110156124be5782818151811061243c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160036000868481518110612481577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546124a6919061422c565b92505081905550806124b79061446b565b90506123fa565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156126165760005b835181101561261457600084828151811061253c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000848381518110612581577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600060036000848152602001908152602001600020549050818110156125e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125dd90613f4c565b60405180910390fd5b81810360036000858152602001908152602001600020819055505050508061260d9061446b565b90506124f8565b505b505050505050565b61263d8473ffffffffffffffffffffffffffffffffffffffff16612e1e565b156127fd578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612683959493929190613c04565b602060405180830381600087803b15801561269d57600080fd5b505af19250505080156126ce57506040513d601f19601f820116820180604052508101906126cb9190613525565b60015b612774576126da6145a1565b806308c379a0141561273757506126ef614c39565b806126fa5750612739565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272e9190613dca565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276b90613dec565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146127fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f290613e4c565b60405180910390fd5b505b505050505050565b6060600060028360026128189190614282565b612822919061422c565b67ffffffffffffffff811115612861577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156128935781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061297b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026129bb9190614282565b6129c5919061422c565b90505b6001811115612ab1577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612a2d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612a6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612aaa906143de565b90506129c8565b5060008414612af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aec90613e2c565b60405180910390fd5b8091505092915050565b60606000600167ffffffffffffffff811115612b44577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612b725781602001602082028036833780820191505090505b5090508281600081518110612bb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b612be48473ffffffffffffffffffffffffffffffffffffffff16612e1e565b15612da4578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612c2a959493929190613c6c565b602060405180830381600087803b158015612c4457600080fd5b505af1925050508015612c7557506040513d601f19601f82011682018060405250810190612c729190613525565b60015b612d1b57612c816145a1565b806308c379a01415612cde5750612c96614c39565b80612ca15750612ce0565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd59190613dca565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1290613dec565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9990613e4c565b60405180910390fd5b505b505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612e4d90614408565b90600052602060002090601f016020900481019282612e6f5760008555612eb6565b82601f10612e8857803560ff1916838001178555612eb6565b82800160010185558215612eb6579182015b82811115612eb5578235825591602001919060010190612e9a565b5b509050612ec39190612ec7565b5090565b5b80821115612ee0576000816000905550600101612ec8565b5090565b6000612ef7612ef284614127565b614102565b90508083825260208201905082856020860282011115612f1657600080fd5b60005b85811015612f465781612f2c8882613066565b845260208401935060208301925050600181019050612f19565b5050509392505050565b6000612f63612f5e84614153565b614102565b90508083825260208201905082856020860282011115612f8257600080fd5b60005b85811015612fb25781612f9888826131d6565b845260208401935060208301925050600181019050612f85565b5050509392505050565b6000612fcf612fca84614153565b614102565b90508083825260208201905082856020860282011115612fee57600080fd5b60005b8581101561301e578161300488826131eb565b845260208401935060208301925050600181019050612ff1565b5050509392505050565b600061303b6130368461417f565b614102565b90508281526020810184848401111561305357600080fd5b61305e84828561439c565b509392505050565b60008135905061307581614ccf565b92915050565b600082601f83011261308c57600080fd5b813561309c848260208601612ee4565b91505092915050565b600082601f8301126130b657600080fd5b81356130c6848260208601612f50565b91505092915050565b600082601f8301126130e057600080fd5b81516130f0848260208601612fbc565b91505092915050565b60008135905061310881614ce6565b92915050565b60008135905061311d81614cfd565b92915050565b60008135905061313281614d14565b92915050565b60008151905061314781614d14565b92915050565b60008083601f84011261315f57600080fd5b8235905067ffffffffffffffff81111561317857600080fd5b60208301915083600182028301111561319057600080fd5b9250929050565b600082601f8301126131a857600080fd5b81356131b8848260208601613028565b91505092915050565b6000813590506131d081614d2b565b92915050565b6000813590506131e581614d42565b92915050565b6000815190506131fa81614d42565b92915050565b60006020828403121561321257600080fd5b600061322084828501613066565b91505092915050565b6000806040838503121561323c57600080fd5b600061324a85828601613066565b925050602061325b85828601613066565b9150509250929050565b600080600080600060a0868803121561327d57600080fd5b600061328b88828901613066565b955050602061329c88828901613066565b945050604086013567ffffffffffffffff8111156132b957600080fd5b6132c5888289016130a5565b935050606086013567ffffffffffffffff8111156132e257600080fd5b6132ee888289016130a5565b925050608086013567ffffffffffffffff81111561330b57600080fd5b61331788828901613197565b9150509295509295909350565b600080600080600060a0868803121561333c57600080fd5b600061334a88828901613066565b955050602061335b88828901613066565b945050604061336c888289016131d6565b935050606061337d888289016131d6565b925050608086013567ffffffffffffffff81111561339a57600080fd5b6133a688828901613197565b9150509295509295909350565b600080604083850312156133c657600080fd5b60006133d485828601613066565b92505060206133e5858286016130f9565b9150509250929050565b6000806040838503121561340257600080fd5b600061341085828601613066565b9250506020613421858286016131d6565b9150509250929050565b6000806040838503121561343e57600080fd5b600083013567ffffffffffffffff81111561345857600080fd5b6134648582860161307b565b925050602083013567ffffffffffffffff81111561348157600080fd5b61348d858286016130a5565b9150509250929050565b6000602082840312156134a957600080fd5b60006134b78482850161310e565b91505092915050565b600080604083850312156134d357600080fd5b60006134e18582860161310e565b92505060206134f285828601613066565b9150509250929050565b60006020828403121561350e57600080fd5b600061351c84828501613123565b91505092915050565b60006020828403121561353757600080fd5b600061354584828501613138565b91505092915050565b60008060008060008060c0878903121561356757600080fd5b600061357589828a016131c1565b965050602061358689828a016131c1565b955050604061359789828a016131c1565b94505060606135a889828a016131c1565b93505060806135b989828a016131c1565b92505060a06135ca89828a016131c1565b9150509295509295509295565b6000602082840312156135e957600080fd5b60006135f7848285016131d6565b91505092915050565b60008060006060848603121561361557600080fd5b6000613623868287016131d6565b9350506020613634868287016131d6565b925050604084013567ffffffffffffffff81111561365157600080fd5b61365d868287016130a5565b9150509250925092565b60008060006060848603121561367c57600080fd5b600061368a868287016131eb565b935050602061369b868287016131eb565b925050604084015167ffffffffffffffff8111156136b857600080fd5b6136c4868287016130cf565b9150509250925092565b600080600080606085870312156136e457600080fd5b60006136f2878288016131d6565b9450506020613703878288016131d6565b935050604085013567ffffffffffffffff81111561372057600080fd5b61372c8782880161314d565b925092505092959194509250565b60006137468383613b91565b60208301905092915050565b61375b81614310565b82525050565b600061376c826141c0565b61377681856141ee565b9350613781836141b0565b8060005b838110156137b2578151613799888261373a565b97506137a4836141e1565b925050600181019050613785565b5085935050505092915050565b6137c881614322565b82525050565b6137d78161432e565b82525050565b60006137e8826141cb565b6137f281856141ff565b93506138028185602086016143ab565b61380b816145c3565b840191505092915050565b6000613821826141d6565b61382b8185614210565b935061383b8185602086016143ab565b613844816145c3565b840191505092915050565b600061385a826141d6565b6138648185614221565b93506138748185602086016143ab565b80840191505092915050565b600061388d603483614210565b9150613898826145e1565b604082019050919050565b60006138b0604883614210565b91506138bb82614630565b606082019050919050565b60006138d3602083614210565b91506138de826146a5565b602082019050919050565b60006138f6602883614210565b9150613901826146ce565b604082019050919050565b6000613919602683614210565b91506139248261471d565b604082019050919050565b600061393c602b83614210565b91506139478261476c565b604082019050919050565b600061395f602583614210565b915061396a826147bb565b604082019050919050565b6000613982602983614210565b915061398d8261480a565b604082019050919050565b60006139a5602583614210565b91506139b082614859565b604082019050919050565b60006139c8603283614210565b91506139d3826148a8565b604082019050919050565b60006139eb602a83614210565b91506139f6826148f7565b604082019050919050565b6000613a0e602883614210565b9150613a1982614946565b604082019050919050565b6000613a31602683614210565b9150613a3c82614995565b604082019050919050565b6000613a54602483614210565b9150613a5f826149e4565b604082019050919050565b6000613a77602083614210565b9150613a8282614a33565b602082019050919050565b6000613a9a601783614221565b9150613aa582614a5c565b601782019050919050565b6000613abd602983614210565b9150613ac882614a85565b604082019050919050565b6000613ae0602983614210565b9150613aeb82614ad4565b604082019050919050565b6000613b03602883614210565b9150613b0e82614b23565b604082019050919050565b6000613b26602183614210565b9150613b3182614b72565b604082019050919050565b6000613b49601183614221565b9150613b5482614bc1565b601182019050919050565b6000613b6c602f83614210565b9150613b7782614bea565b604082019050919050565b613b8b81614364565b82525050565b613b9a81614392565b82525050565b613ba981614392565b82525050565b6000613bba82613a8d565b9150613bc6828561384f565b9150613bd182613b3c565b9150613bdd828461384f565b91508190509392505050565b6000602082019050613bfe6000830184613752565b92915050565b600060a082019050613c196000830188613752565b613c266020830187613752565b8181036040830152613c388186613761565b90508181036060830152613c4c8185613761565b90508181036080830152613c6081846137dd565b90509695505050505050565b600060a082019050613c816000830188613752565b613c8e6020830187613752565b613c9b6040830186613ba0565b613ca86060830185613ba0565b8181036080830152613cba81846137dd565b90509695505050505050565b6000604082019050613cdb6000830185613752565b613ce86020830184613ba0565b9392505050565b6000608082019050613d046000830187613752565b613d116020830186613ba0565b613d1e6040830185613ba0565b8181036060830152613d3081846137dd565b905095945050505050565b60006020820190508181036000830152613d558184613761565b905092915050565b60006040820190508181036000830152613d778185613761565b90508181036020830152613d8b8184613761565b90509392505050565b6000602082019050613da960008301846137bf565b92915050565b6000602082019050613dc460008301846137ce565b92915050565b60006020820190508181036000830152613de48184613816565b905092915050565b60006020820190508181036000830152613e0581613880565b9050919050565b60006020820190508181036000830152613e25816138a3565b9050919050565b60006020820190508181036000830152613e45816138c6565b9050919050565b60006020820190508181036000830152613e65816138e9565b9050919050565b60006020820190508181036000830152613e858161390c565b9050919050565b60006020820190508181036000830152613ea58161392f565b9050919050565b60006020820190508181036000830152613ec581613952565b9050919050565b60006020820190508181036000830152613ee581613975565b9050919050565b60006020820190508181036000830152613f0581613998565b9050919050565b60006020820190508181036000830152613f25816139bb565b9050919050565b60006020820190508181036000830152613f45816139de565b9050919050565b60006020820190508181036000830152613f6581613a01565b9050919050565b60006020820190508181036000830152613f8581613a24565b9050919050565b60006020820190508181036000830152613fa581613a47565b9050919050565b60006020820190508181036000830152613fc581613a6a565b9050919050565b60006020820190508181036000830152613fe581613ab0565b9050919050565b6000602082019050818103600083015261400581613ad3565b9050919050565b6000602082019050818103600083015261402581613af6565b9050919050565b6000602082019050818103600083015261404581613b19565b9050919050565b6000602082019050818103600083015261406581613b5f565b9050919050565b60006020820190506140816000830184613b82565b92915050565b600060208201905061409c6000830184613ba0565b92915050565b60006040820190506140b76000830185613ba0565b6140c46020830184613ba0565b9392505050565b60006060820190506140e06000830186613ba0565b6140ed6020830185613ba0565b6140fa6040830184613ba0565b949350505050565b600061410c61411d565b9050614118828261443a565b919050565b6000604051905090565b600067ffffffffffffffff82111561414257614141614572565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561416e5761416d614572565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561419a57614199614572565b5b6141a3826145c3565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061423782614392565b915061424283614392565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614277576142766144e5565b5b828201905092915050565b600061428d82614392565b915061429883614392565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142d1576142d06144e5565b5b828202905092915050565b60006142e782614392565b91506142f283614392565b925082821015614305576143046144e5565b5b828203905092915050565b600061431b82614372565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156143c95780820151818401526020810190506143ae565b838111156143d8576000848401525b50505050565b60006143e982614392565b915060008214156143fd576143fc6144e5565b5b600182039050919050565b6000600282049050600182168061442057607f821691505b6020821081141561443457614433614543565b5b50919050565b614443826145c3565b810181811067ffffffffffffffff8211171561446257614461614572565b5b80604052505050565b600061447682614392565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144a9576144a86144e5565b5b600182019050919050565b60006144bf82614392565b91506144ca83614392565b9250826144da576144d9614514565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156145c05760046000803e6145bd6000516145d4565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f4c6567656e6461727920726172697479206c6576656c206d757374206265206c60008201527f657373207468616e206f7220657175616c20746f20746865206d61782072617260208201527f69747920726f6c6c000000000000000000000000000000000000000000000000604082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f436f6d6d6f6e206d757374206265206c6573732072617265207468616e20756e60008201527f636f6d6d6f6e0000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f45706963206d757374206265206c6573732072617265207468616e206c65676560008201527f6e64617279000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b7f416e20616464726573732063616e206f6e6c7920636c61696d206f6e6365207060008201527f6572206461790000000000000000000000000000000000000000000000000000602082015250565b7f556e636f6d6d6f6e206d757374206265206c6573732072617265207468616e2060008201527f7261726500000000000000000000000000000000000000000000000000000000602082015250565b7f52617265206d757374206265206c6573732072617265207468616e2065706963600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600060443d1015614c4957614ccc565b614c5161411d565b60043d036004823e80513d602482011167ffffffffffffffff82111715614c79575050614ccc565b808201805167ffffffffffffffff811115614c975750505050614ccc565b80602083010160043d038501811115614cb4575050505050614ccc565b614cc38260200185018661443a565b82955050505050505b90565b614cd881614310565b8114614ce357600080fd5b50565b614cef81614322565b8114614cfa57600080fd5b50565b614d068161432e565b8114614d1157600080fd5b50565b614d1d81614338565b8114614d2857600080fd5b50565b614d3481614364565b8114614d3f57600080fd5b50565b614d4b81614392565b8114614d5657600080fd5b5056fea26469706673582212206911e4b5f7bfe79fa8371e25950d980d25997eb169f4f6b859341d8bcd6b9f9a64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c35760003560e01c80636a6b6ed8116100f9578063aad3ec9611610097578063d547741f11610071578063d547741f1461052a578063db43235b14610546578063e985e9c514610564578063f242432a14610594576101c3565b8063aad3ec96146104c0578063bd85b039146104dc578063d44c46701461050c576101c3565b80639a6a8888116100d35780639a6a88881461044c5780639beccd5f14610468578063a217fddf14610486578063a22cb465146104a4576101c3565b80636a6b6ed8146103e0578063710d2b15146103fe57806391d148541461041c576101c3565b80632eb2c2d61161016657806340a32dc51161014057806340a32dc5146103485780634e1273f4146103645780634f558e79146103945780635d5d588c146103c4576101c3565b80632eb2c2d6146102f45780632f2ff15d1461031057806336568abe1461032c576101c3565b80630e89341c116101a25780630e89341c1461024657806313ca915714610276578063248a9ca3146102945780632d7e79e0146102c4576101c3565b8062fdd58e146101c857806301ffc9a7146101f857806309c3bf7214610228575b600080fd5b6101e260048036038101906101dd91906133ef565b6105b0565b6040516101ef9190614087565b60405180910390f35b610212600480360381019061020d91906134fc565b610679565b60405161021f9190613d94565b60405180910390f35b61023061068b565b60405161023d919061406c565b60405180910390f35b610260600480360381019061025b91906135d7565b61069f565b60405161026d9190613dca565b60405180910390f35b61027e610733565b60405161028b9190613be9565b60405180910390f35b6102ae60048036038101906102a99190613497565b610759565b6040516102bb9190613daf565b60405180910390f35b6102de60048036038101906102d99190613200565b610779565b6040516102eb9190614087565b60405180910390f35b61030e60048036038101906103099190613265565b610791565b005b61032a600480360381019061032591906134c0565b610832565b005b610346600480360381019061034191906134c0565b61085b565b005b610362600480360381019061035d919061354e565b6108de565b005b61037e6004803603810190610379919061342b565b610b1d565b60405161038b9190613d3b565b60405180910390f35b6103ae60048036038101906103a991906135d7565b610cce565b6040516103bb9190613d94565b60405180910390f35b6103de60048036038101906103d991906136ce565b610ce2565b005b6103e8610d44565b6040516103f5919061406c565b60405180910390f35b610406610d58565b604051610413919061406c565b60405180910390f35b610436600480360381019061043191906134c0565b610d6c565b6040516104439190613d94565b60405180910390f35b61046660048036038101906104619190613200565b610dd7565b005b610470610e31565b60405161047d919061406c565b60405180910390f35b61048e610e45565b60405161049b9190613daf565b60405180910390f35b6104be60048036038101906104b991906133b3565b610e4c565b005b6104da60048036038101906104d591906133ef565b610e62565b005b6104f660048036038101906104f191906135d7565b611531565b6040516105039190614087565b60405180910390f35b61051461154e565b604051610521919061406c565b60405180910390f35b610544600480360381019061053f91906134c0565b611562565b005b61054e61158b565b60405161055b919061406c565b60405180910390f35b61057e60048036038101906105799190613229565b61159f565b60405161058b9190613d94565b60405180910390f35b6105ae60048036038101906105a99190613324565b611633565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890613e8c565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000610684826116d4565b9050919050565b6006601c9054906101000a900461ffff1681565b6060600280546106ae90614408565b80601f01602080910402602001604051908101604052809291908181526020018280546106da90614408565b80156107275780601f106106fc57610100808354040283529160200191610727565b820191906000526020600020905b81548152906001019060200180831161070a57829003601f168201915b50505050509050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060046000838152602001908152602001600020600101549050919050565b60056020528060005260406000206000915090505481565b61079961174e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806107df57506107de856107d961174e565b61159f565b5b61081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081590613f0c565b60405180910390fd5b61082b8585858585611756565b5050505050565b61083b82610759565b61084c8161084761174e565b611ab6565b6108568383611b53565b505050565b61086361174e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c79061404c565b60405180910390fd5b6108da8282611c34565b5050565b6000801b6108f3816108ee61174e565b611ab6565b8561ffff168761ffff161061093d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093490613e6c565b60405180910390fd5b8461ffff168661ffff1610610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e90613f8c565b60405180910390fd5b8361ffff168561ffff16106109d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c890613fac565b60405180910390fd5b8261ffff168461ffff1610610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1290613eac565b60405180910390fd5b8161ffff168361ffff161115610a66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5d90613e0c565b60405180910390fd5b86600660146101000a81548161ffff021916908361ffff16021790555085600660166101000a81548161ffff021916908361ffff16021790555084600660186101000a81548161ffff021916908361ffff160217905550836006601a6101000a81548161ffff021916908361ffff160217905550826006601c6101000a81548161ffff021916908361ffff160217905550816006601e6101000a81548161ffff021916908361ffff16021790555050505050505050565b60608151835114610b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5a90613fec565b60405180910390fd5b6000835167ffffffffffffffff811115610ba6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610bd45781602001602082028036833780820191505090505b50905060005b8451811015610cc357610c6d858281518110610c1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110610c60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516105b0565b828281518110610ca6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080610cbc9061446b565b9050610bda565b508091505092915050565b600080610cda83611531565b119050919050565b6000801b610cf781610cf261174e565b611ab6565b8282810190610d069190613600565b50505082826007600088815260200190815260200160002060008781526020019081526020016000209190610d3c929190612e41565b505050505050565b600660189054906101000a900461ffff1681565b600660169054906101000a900461ffff1681565b60006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b610dec81610de761174e565b611ab6565b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6006601a9054906101000a900461ffff1681565b6000801b81565b610e5e610e5761174e565b8383611d16565b5050565b6201518042610e7191906142dc565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee990613f6c565b60405180910390fd5b42600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000610f4182611e83565b905060006006601c9054906101000a900461ffff1661ffff1682610f6591906144b4565b9050600060606000600180811115610fa6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050600660149054906101000a900461ffff1661ffff168410156110055760006004811115610ffe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b925061115b565b600660169054906101000a900461ffff1661ffff16841015611062576001600481111561105b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b925061115a565b600660189054906101000a900461ffff1661ffff168410156110bf57600260048111156110b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611159565b6006601a9054906101000a900461ffff1661ffff1684101561111c5760036004811115611115577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250611158565b600480811115611155577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b92505b5b5b5b600480811115611194577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8314156111bc576111b78760018060405180602001604052806000815250611eba565b6114eb565b6001808111156111f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6111fe87611e83565b61120891906144b4565b90506000806000600760008581526020019081526020016000206000878152602001908152602001600020805461123e90614408565b80601f016020809104026020016040519081016040528092919081815260200182805461126a90614408565b80156112b75780601f1061128c576101008083540402835291602001916112b7565b820191906000526020600020905b81548152906001019060200180831161129a57829003601f168201915b50505050508060200190518101906112cf9190613667565b9250925092506000600184846112e591906142dc565b6112ef919061422c565b6112f88b611e83565b61130291906144b4565b8461130d919061422c565b905060006001811115611349577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b85141561140c576000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634eb902998d846040518363ffffffff1660e01b81526004016113b2929190613cc6565b600060405180830381600087803b1580156113cc57600080fd5b505af11580156113e0573d6000803e3d6000fd5b50505050816040516020016113f59190614087565b6040516020818303038152906040529650506114e6565b600082516114198c611e83565b61142391906144b4565b90506114808c848381518110611462577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518460405180602001604052806000815250611eba565b8281815181106114b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826040516020016114d39291906140a2565b6040516020818303038152906040529650505b505050505b7f0abddb16689c98df752491657c9e586eff3198ece0269bcb57d4f690528e71a4878285856040516115209493929190613cef565b60405180910390a150505050505050565b600060036000838152602001908152602001600020549050919050565b6006601e9054906101000a900461ffff1681565b61156b82610759565b61157c8161157761174e565b611ab6565b6115868383611c34565b505050565b600660149054906101000a900461ffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61163b61174e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061168157506116808561167b61174e565b61159f565b5b6116c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b790613ecc565b60405180910390fd5b6116cd8585858585612050565b5050505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806117475750611746826122d2565b5b9050919050565b600033905090565b815183511461179a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117919061400c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561180a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180190613eec565b60405180910390fd5b600061181461174e565b90506118248187878787876123b4565b60005b8451811015611a2157600085828151811061186b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008583815181106118b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194890613f2c565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a06919061422c565b9250508190555050505080611a1a9061446b565b9050611827565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a98929190613d5d565b60405180910390a4611aae81878787878761261e565b505050505050565b611ac08282610d6c565b611b4f57611ae58173ffffffffffffffffffffffffffffffffffffffff166014612805565b611af38360001c6020612805565b604051602001611b04929190613baf565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b469190613dca565b60405180910390fd5b5050565b611b5d8282610d6c565b611c305760016004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611bd561174e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611c3e8282610d6c565b15611d125760006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611cb761174e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7c90613fcc565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e769190613d94565b60405180910390a3505050565b6000424483604051602001611e9a939291906140cb565b6040516020818303038152906040528051906020012060001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611f2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f219061402c565b60405180910390fd5b6000611f3461174e565b9050611f5581600087611f4688612aff565b611f4f88612aff565b876123b4565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fb4919061422c565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516120329291906140a2565b60405180910390a461204981600087878787612bc5565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156120c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b790613eec565b60405180910390fd5b60006120ca61174e565b90506120ea8187876120db88612aff565b6120e488612aff565b876123b4565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217890613f2c565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612236919061422c565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516122b39291906140a2565b60405180910390a46122c9828888888888612bc5565b50505050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061239d57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806123ad57506123ac82612dac565b5b9050919050565b6123c2868686868686612e16565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156124c05760005b83518110156124be5782818151811061243c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160036000868481518110612481577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546124a6919061422c565b92505081905550806124b79061446b565b90506123fa565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156126165760005b835181101561261457600084828151811061253c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000848381518110612581577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600060036000848152602001908152602001600020549050818110156125e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125dd90613f4c565b60405180910390fd5b81810360036000858152602001908152602001600020819055505050508061260d9061446b565b90506124f8565b505b505050505050565b61263d8473ffffffffffffffffffffffffffffffffffffffff16612e1e565b156127fd578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612683959493929190613c04565b602060405180830381600087803b15801561269d57600080fd5b505af19250505080156126ce57506040513d601f19601f820116820180604052508101906126cb9190613525565b60015b612774576126da6145a1565b806308c379a0141561273757506126ef614c39565b806126fa5750612739565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272e9190613dca565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276b90613dec565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146127fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f290613e4c565b60405180910390fd5b505b505050505050565b6060600060028360026128189190614282565b612822919061422c565b67ffffffffffffffff811115612861577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156128935781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061297b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026129bb9190614282565b6129c5919061422c565b90505b6001811115612ab1577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612a2d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612a6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612aaa906143de565b90506129c8565b5060008414612af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aec90613e2c565b60405180910390fd5b8091505092915050565b60606000600167ffffffffffffffff811115612b44577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612b725781602001602082028036833780820191505090505b5090508281600081518110612bb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b612be48473ffffffffffffffffffffffffffffffffffffffff16612e1e565b15612da4578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612c2a959493929190613c6c565b602060405180830381600087803b158015612c4457600080fd5b505af1925050508015612c7557506040513d601f19601f82011682018060405250810190612c729190613525565b60015b612d1b57612c816145a1565b806308c379a01415612cde5750612c96614c39565b80612ca15750612ce0565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd59190613dca565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1290613dec565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9990613e4c565b60405180910390fd5b505b505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612e4d90614408565b90600052602060002090601f016020900481019282612e6f5760008555612eb6565b82601f10612e8857803560ff1916838001178555612eb6565b82800160010185558215612eb6579182015b82811115612eb5578235825591602001919060010190612e9a565b5b509050612ec39190612ec7565b5090565b5b80821115612ee0576000816000905550600101612ec8565b5090565b6000612ef7612ef284614127565b614102565b90508083825260208201905082856020860282011115612f1657600080fd5b60005b85811015612f465781612f2c8882613066565b845260208401935060208301925050600181019050612f19565b5050509392505050565b6000612f63612f5e84614153565b614102565b90508083825260208201905082856020860282011115612f8257600080fd5b60005b85811015612fb25781612f9888826131d6565b845260208401935060208301925050600181019050612f85565b5050509392505050565b6000612fcf612fca84614153565b614102565b90508083825260208201905082856020860282011115612fee57600080fd5b60005b8581101561301e578161300488826131eb565b845260208401935060208301925050600181019050612ff1565b5050509392505050565b600061303b6130368461417f565b614102565b90508281526020810184848401111561305357600080fd5b61305e84828561439c565b509392505050565b60008135905061307581614ccf565b92915050565b600082601f83011261308c57600080fd5b813561309c848260208601612ee4565b91505092915050565b600082601f8301126130b657600080fd5b81356130c6848260208601612f50565b91505092915050565b600082601f8301126130e057600080fd5b81516130f0848260208601612fbc565b91505092915050565b60008135905061310881614ce6565b92915050565b60008135905061311d81614cfd565b92915050565b60008135905061313281614d14565b92915050565b60008151905061314781614d14565b92915050565b60008083601f84011261315f57600080fd5b8235905067ffffffffffffffff81111561317857600080fd5b60208301915083600182028301111561319057600080fd5b9250929050565b600082601f8301126131a857600080fd5b81356131b8848260208601613028565b91505092915050565b6000813590506131d081614d2b565b92915050565b6000813590506131e581614d42565b92915050565b6000815190506131fa81614d42565b92915050565b60006020828403121561321257600080fd5b600061322084828501613066565b91505092915050565b6000806040838503121561323c57600080fd5b600061324a85828601613066565b925050602061325b85828601613066565b9150509250929050565b600080600080600060a0868803121561327d57600080fd5b600061328b88828901613066565b955050602061329c88828901613066565b945050604086013567ffffffffffffffff8111156132b957600080fd5b6132c5888289016130a5565b935050606086013567ffffffffffffffff8111156132e257600080fd5b6132ee888289016130a5565b925050608086013567ffffffffffffffff81111561330b57600080fd5b61331788828901613197565b9150509295509295909350565b600080600080600060a0868803121561333c57600080fd5b600061334a88828901613066565b955050602061335b88828901613066565b945050604061336c888289016131d6565b935050606061337d888289016131d6565b925050608086013567ffffffffffffffff81111561339a57600080fd5b6133a688828901613197565b9150509295509295909350565b600080604083850312156133c657600080fd5b60006133d485828601613066565b92505060206133e5858286016130f9565b9150509250929050565b6000806040838503121561340257600080fd5b600061341085828601613066565b9250506020613421858286016131d6565b9150509250929050565b6000806040838503121561343e57600080fd5b600083013567ffffffffffffffff81111561345857600080fd5b6134648582860161307b565b925050602083013567ffffffffffffffff81111561348157600080fd5b61348d858286016130a5565b9150509250929050565b6000602082840312156134a957600080fd5b60006134b78482850161310e565b91505092915050565b600080604083850312156134d357600080fd5b60006134e18582860161310e565b92505060206134f285828601613066565b9150509250929050565b60006020828403121561350e57600080fd5b600061351c84828501613123565b91505092915050565b60006020828403121561353757600080fd5b600061354584828501613138565b91505092915050565b60008060008060008060c0878903121561356757600080fd5b600061357589828a016131c1565b965050602061358689828a016131c1565b955050604061359789828a016131c1565b94505060606135a889828a016131c1565b93505060806135b989828a016131c1565b92505060a06135ca89828a016131c1565b9150509295509295509295565b6000602082840312156135e957600080fd5b60006135f7848285016131d6565b91505092915050565b60008060006060848603121561361557600080fd5b6000613623868287016131d6565b9350506020613634868287016131d6565b925050604084013567ffffffffffffffff81111561365157600080fd5b61365d868287016130a5565b9150509250925092565b60008060006060848603121561367c57600080fd5b600061368a868287016131eb565b935050602061369b868287016131eb565b925050604084015167ffffffffffffffff8111156136b857600080fd5b6136c4868287016130cf565b9150509250925092565b600080600080606085870312156136e457600080fd5b60006136f2878288016131d6565b9450506020613703878288016131d6565b935050604085013567ffffffffffffffff81111561372057600080fd5b61372c8782880161314d565b925092505092959194509250565b60006137468383613b91565b60208301905092915050565b61375b81614310565b82525050565b600061376c826141c0565b61377681856141ee565b9350613781836141b0565b8060005b838110156137b2578151613799888261373a565b97506137a4836141e1565b925050600181019050613785565b5085935050505092915050565b6137c881614322565b82525050565b6137d78161432e565b82525050565b60006137e8826141cb565b6137f281856141ff565b93506138028185602086016143ab565b61380b816145c3565b840191505092915050565b6000613821826141d6565b61382b8185614210565b935061383b8185602086016143ab565b613844816145c3565b840191505092915050565b600061385a826141d6565b6138648185614221565b93506138748185602086016143ab565b80840191505092915050565b600061388d603483614210565b9150613898826145e1565b604082019050919050565b60006138b0604883614210565b91506138bb82614630565b606082019050919050565b60006138d3602083614210565b91506138de826146a5565b602082019050919050565b60006138f6602883614210565b9150613901826146ce565b604082019050919050565b6000613919602683614210565b91506139248261471d565b604082019050919050565b600061393c602b83614210565b91506139478261476c565b604082019050919050565b600061395f602583614210565b915061396a826147bb565b604082019050919050565b6000613982602983614210565b915061398d8261480a565b604082019050919050565b60006139a5602583614210565b91506139b082614859565b604082019050919050565b60006139c8603283614210565b91506139d3826148a8565b604082019050919050565b60006139eb602a83614210565b91506139f6826148f7565b604082019050919050565b6000613a0e602883614210565b9150613a1982614946565b604082019050919050565b6000613a31602683614210565b9150613a3c82614995565b604082019050919050565b6000613a54602483614210565b9150613a5f826149e4565b604082019050919050565b6000613a77602083614210565b9150613a8282614a33565b602082019050919050565b6000613a9a601783614221565b9150613aa582614a5c565b601782019050919050565b6000613abd602983614210565b9150613ac882614a85565b604082019050919050565b6000613ae0602983614210565b9150613aeb82614ad4565b604082019050919050565b6000613b03602883614210565b9150613b0e82614b23565b604082019050919050565b6000613b26602183614210565b9150613b3182614b72565b604082019050919050565b6000613b49601183614221565b9150613b5482614bc1565b601182019050919050565b6000613b6c602f83614210565b9150613b7782614bea565b604082019050919050565b613b8b81614364565b82525050565b613b9a81614392565b82525050565b613ba981614392565b82525050565b6000613bba82613a8d565b9150613bc6828561384f565b9150613bd182613b3c565b9150613bdd828461384f565b91508190509392505050565b6000602082019050613bfe6000830184613752565b92915050565b600060a082019050613c196000830188613752565b613c266020830187613752565b8181036040830152613c388186613761565b90508181036060830152613c4c8185613761565b90508181036080830152613c6081846137dd565b90509695505050505050565b600060a082019050613c816000830188613752565b613c8e6020830187613752565b613c9b6040830186613ba0565b613ca86060830185613ba0565b8181036080830152613cba81846137dd565b90509695505050505050565b6000604082019050613cdb6000830185613752565b613ce86020830184613ba0565b9392505050565b6000608082019050613d046000830187613752565b613d116020830186613ba0565b613d1e6040830185613ba0565b8181036060830152613d3081846137dd565b905095945050505050565b60006020820190508181036000830152613d558184613761565b905092915050565b60006040820190508181036000830152613d778185613761565b90508181036020830152613d8b8184613761565b90509392505050565b6000602082019050613da960008301846137bf565b92915050565b6000602082019050613dc460008301846137ce565b92915050565b60006020820190508181036000830152613de48184613816565b905092915050565b60006020820190508181036000830152613e0581613880565b9050919050565b60006020820190508181036000830152613e25816138a3565b9050919050565b60006020820190508181036000830152613e45816138c6565b9050919050565b60006020820190508181036000830152613e65816138e9565b9050919050565b60006020820190508181036000830152613e858161390c565b9050919050565b60006020820190508181036000830152613ea58161392f565b9050919050565b60006020820190508181036000830152613ec581613952565b9050919050565b60006020820190508181036000830152613ee581613975565b9050919050565b60006020820190508181036000830152613f0581613998565b9050919050565b60006020820190508181036000830152613f25816139bb565b9050919050565b60006020820190508181036000830152613f45816139de565b9050919050565b60006020820190508181036000830152613f6581613a01565b9050919050565b60006020820190508181036000830152613f8581613a24565b9050919050565b60006020820190508181036000830152613fa581613a47565b9050919050565b60006020820190508181036000830152613fc581613a6a565b9050919050565b60006020820190508181036000830152613fe581613ab0565b9050919050565b6000602082019050818103600083015261400581613ad3565b9050919050565b6000602082019050818103600083015261402581613af6565b9050919050565b6000602082019050818103600083015261404581613b19565b9050919050565b6000602082019050818103600083015261406581613b5f565b9050919050565b60006020820190506140816000830184613b82565b92915050565b600060208201905061409c6000830184613ba0565b92915050565b60006040820190506140b76000830185613ba0565b6140c46020830184613ba0565b9392505050565b60006060820190506140e06000830186613ba0565b6140ed6020830185613ba0565b6140fa6040830184613ba0565b949350505050565b600061410c61411d565b9050614118828261443a565b919050565b6000604051905090565b600067ffffffffffffffff82111561414257614141614572565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561416e5761416d614572565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561419a57614199614572565b5b6141a3826145c3565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061423782614392565b915061424283614392565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614277576142766144e5565b5b828201905092915050565b600061428d82614392565b915061429883614392565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142d1576142d06144e5565b5b828202905092915050565b60006142e782614392565b91506142f283614392565b925082821015614305576143046144e5565b5b828203905092915050565b600061431b82614372565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156143c95780820151818401526020810190506143ae565b838111156143d8576000848401525b50505050565b60006143e982614392565b915060008214156143fd576143fc6144e5565b5b600182039050919050565b6000600282049050600182168061442057607f821691505b6020821081141561443457614433614543565b5b50919050565b614443826145c3565b810181811067ffffffffffffffff8211171561446257614461614572565b5b80604052505050565b600061447682614392565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144a9576144a86144e5565b5b600182019050919050565b60006144bf82614392565b91506144ca83614392565b9250826144da576144d9614514565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156145c05760046000803e6145bd6000516145d4565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f4c6567656e6461727920726172697479206c6576656c206d757374206265206c60008201527f657373207468616e206f7220657175616c20746f20746865206d61782072617260208201527f69747920726f6c6c000000000000000000000000000000000000000000000000604082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f436f6d6d6f6e206d757374206265206c6573732072617265207468616e20756e60008201527f636f6d6d6f6e0000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f45706963206d757374206265206c6573732072617265207468616e206c65676560008201527f6e64617279000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b7f416e20616464726573732063616e206f6e6c7920636c61696d206f6e6365207060008201527f6572206461790000000000000000000000000000000000000000000000000000602082015250565b7f556e636f6d6d6f6e206d757374206265206c6573732072617265207468616e2060008201527f7261726500000000000000000000000000000000000000000000000000000000602082015250565b7f52617265206d757374206265206c6573732072617265207468616e2065706963600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600060443d1015614c4957614ccc565b614c5161411d565b60043d036004823e80513d602482011167ffffffffffffffff82111715614c79575050614ccc565b808201805167ffffffffffffffff811115614c975750505050614ccc565b80602083010160043d038501811115614cb4575050505050614ccc565b614cc38260200185018661443a565b82955050505050505b90565b614cd881614310565b8114614ce357600080fd5b50565b614cef81614322565b8114614cfa57600080fd5b50565b614d068161432e565b8114614d1157600080fd5b50565b614d1d81614338565b8114614d2857600080fd5b50565b614d3481614364565b8114614d3f57600080fd5b50565b614d4b81614392565b8114614d5657600080fd5b5056fea26469706673582212206911e4b5f7bfe79fa8371e25950d980d25997eb169f4f6b859341d8bcd6b9f9a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)": {
        "params": {
          "common": "- rarity level of common quests",
          "epic": "- rarity level of epic quests",
          "legendary": "- rarity level of legendary quests",
          "maxRoll": "- max rarity level",
          "rare": "- rarity level of rare quests",
          "uncommon": "- rarity level of uncommon quests"
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "_commonRoll": {
        "details": "Rarity rolls"
      },
      "_lastUpdate": {
        "details": "Track last time a claim was made for a specific pet"
      },
      "_rewardMapping": {
        "details": "rewardType => (rewardRarity => data)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)": {
        "notice": "returns the rarity level set for each rarity, and the maximum roll"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 407,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 413,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 415,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3113,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3281,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_lastUpdate",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3283,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_milkContractAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3287,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_commonRoll",
        "offset": 20,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 3290,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_uncommonRoll",
        "offset": 22,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 3293,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_rareRoll",
        "offset": 24,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 3296,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_epicRoll",
        "offset": 26,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 3299,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_legendaryRoll",
        "offset": 28,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 3301,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_maxRarityRoll",
        "offset": 30,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 3317,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_rewardMapping",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bytes_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/itemFactory.sol:ItemFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/itemFactory.sol:ItemFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}