/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockTestContract,
  MockTestContractInterface,
} from "../MockTestContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_milk",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "gameBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "gameMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "gameTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "gameWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161089538038061089583398181016040528101906100329190610126565b6100647f54512cc1720ac8a4dce6044ebebc3a13c4f41133c57b4a1bf3e82a0bebf3ae9860001b61010e60201b60201c565b6100967fda6159e42cdac5fc5d1d8ce9112d1f03394cb6c8dad615d4fca838122074d53a60001b61010e60201b60201c565b6100c87f29c9b6575f4c159a34811be1f3e44dfcd5d90b3e22c601bfd927d3f814a007f260001b61010e60201b60201c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610198565b50565b60008151905061012081610181565b92915050565b60006020828403121561013857600080fd5b600061014684828501610111565b91505092915050565b600061015a82610161565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61018a8161014f565b811461019557600080fd5b50565b6106ee806101a76000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631bf7dfb014610051578063271292f51461006d5780632e07f60d146100895780634eb90299146100a5575b600080fd5b61006b60048036038101906100669190610545565b6100c1565b005b61008760048036038101906100829190610594565b6101d9565b005b6100a3600480360381019061009e9190610594565b6102ee565b005b6100bf60048036038101906100ba9190610594565b610403565b005b6100ed7ff2bccac596914f10576c3a90bae3f5d6284d855b23b6eae18fec823d72f63dd760001b610518565b6101197f3480d6ab75515067c09b8ff7eec46c7534601630305e7316ba1207c177cecf2d60001b610518565b6101457fec482b66225e78127e2cb32a25921b4e91aef7bc55995a4f706d40e56b8ae12660001b610518565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bf7dfb08484846040518463ffffffff1660e01b81526004016101a2939291906105ee565b600060405180830381600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b50505050505050565b6102057fc4f0748d68fe31285467646198b5c8b2916af33b1eae493bd9db0958d7eac33a60001b610518565b6102317f239c86ec6853ab0ea46484f26e901095003e2ee723233d26067122d9090f4fc760001b610518565b61025d7f3d6dbffe3648713c2419ae1cc322cf897e7ad0716cb08ad66e1964b16c6fb1ef60001b610518565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663271292f583836040518363ffffffff1660e01b81526004016102b8929190610625565b600060405180830381600087803b1580156102d257600080fd5b505af11580156102e6573d6000803e3d6000fd5b505050505050565b61031a7f33dd4ea368646322cb25be2f9cb88224c98e48c7a03395cb8684de3c7ffcd33760001b610518565b6103467f5508a5196c410816784622a05ef288e38fc8991e6c3a865222058bd40fa4f35960001b610518565b6103727fd0a7ef226adab0688fc666c75d21b297d53965bb10bea85e1854248c7959d6c360001b610518565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e07f60d83836040518363ffffffff1660e01b81526004016103cd929190610625565b600060405180830381600087803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b505050505050565b61042f7f9f176573e604dd10a759360a49b130f88890c12e6523eb885c1b196437b8b11760001b610518565b61045b7f29fd7ee4125da14f8f1cba543135e4ed025589f25535c0dbefb0037563ee52c460001b610518565b6104877f1558858a8252d8b6a3f1e86eb1b72a6e927949d94fdf7716eedf7b8d601fbe6b60001b610518565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634eb9029983836040518363ffffffff1660e01b81526004016104e2929190610625565b600060405180830381600087803b1580156104fc57600080fd5b505af1158015610510573d6000803e3d6000fd5b505050505050565b50565b60008135905061052a8161068a565b92915050565b60008135905061053f816106a1565b92915050565b60008060006060848603121561055a57600080fd5b60006105688682870161051b565b93505060206105798682870161051b565b925050604061058a86828701610530565b9150509250925092565b600080604083850312156105a757600080fd5b60006105b58582860161051b565b92505060206105c685828601610530565b9150509250929050565b6105d98161064e565b82525050565b6105e881610680565b82525050565b600060608201905061060360008301866105d0565b61061060208301856105d0565b61061d60408301846105df565b949350505050565b600060408201905061063a60008301856105d0565b61064760208301846105df565b9392505050565b600061065982610660565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6106938161064e565b811461069e57600080fd5b50565b6106aa81610680565b81146106b557600080fd5b5056fea2646970667358221220faaa97414de30c4818a792d564588f9fff67fff9052bf6c03f6307c7c4c5932d64736f6c63430008040033";

type MockTestContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTestContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTestContract__factory extends ContractFactory {
  constructor(...args: MockTestContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockTestContract";
  }

  deploy(
    _milk: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockTestContract> {
    return super.deploy(_milk, overrides || {}) as Promise<MockTestContract>;
  }
  getDeployTransaction(
    _milk: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_milk, overrides || {});
  }
  attach(address: string): MockTestContract {
    return super.attach(address) as MockTestContract;
  }
  connect(signer: Signer): MockTestContract__factory {
    return super.connect(signer) as MockTestContract__factory;
  }
  static readonly contractName: "MockTestContract";
  public readonly contractName: "MockTestContract";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTestContractInterface {
    return new utils.Interface(_abi) as MockTestContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTestContract {
    return new Contract(address, _abi, signerOrProvider) as MockTestContract;
  }
}
